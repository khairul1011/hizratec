{"ast":null,"code":"import _defineProperty from \"D:/download/notus-react-main/notus-react-main/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _inherits from \"D:/download/notus-react-main/notus-react-main/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"D:/download/notus-react-main/notus-react-main/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _toConsumableArray from \"D:/download/notus-react-main/notus-react-main/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _objectSpread from \"D:/download/notus-react-main/notus-react-main/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"D:/download/notus-react-main/notus-react-main/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/download/notus-react-main/notus-react-main/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\n/**\n * Fuse.js v6.6.2 - Lightweight fuzzy-search (http://fusejs.io)\n *\n * Copyright (c) 2022 Kiro Risk (http://kiro.me)\n * All Rights Reserved. Apache Software License 2.0\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n */\nfunction isArray(value) {\n  return !Array.isArray ? getTag(value) === '[object Array]' : Array.isArray(value);\n} // Adapted from: https://github.com/lodash/lodash/blob/master/.internal/baseToString.js\n\n\nvar INFINITY = 1 / 0;\n\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n\n  var result = value + '';\n  return result == '0' && 1 / value == -INFINITY ? '-0' : result;\n}\n\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\nfunction isString(value) {\n  return typeof value === 'string';\n}\n\nfunction isNumber(value) {\n  return typeof value === 'number';\n} // Adapted from: https://github.com/lodash/lodash/blob/master/isBoolean.js\n\n\nfunction isBoolean(value) {\n  return value === true || value === false || isObjectLike(value) && getTag(value) == '[object Boolean]';\n}\n\nfunction isObject(value) {\n  return typeof value === 'object';\n} // Checks if `value` is object-like.\n\n\nfunction isObjectLike(value) {\n  return isObject(value) && value !== null;\n}\n\nfunction isDefined(value) {\n  return value !== undefined && value !== null;\n}\n\nfunction isBlank(value) {\n  return !value.trim().length;\n} // Gets the `toStringTag` of `value`.\n// Adapted from: https://github.com/lodash/lodash/blob/master/.internal/getTag.js\n\n\nfunction getTag(value) {\n  return value == null ? value === undefined ? '[object Undefined]' : '[object Null]' : Object.prototype.toString.call(value);\n}\n\nvar EXTENDED_SEARCH_UNAVAILABLE = 'Extended search is not available';\nvar INCORRECT_INDEX_TYPE = \"Incorrect 'index' type\";\n\nvar LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY = function LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY(key) {\n  return \"Invalid value for key \".concat(key);\n};\n\nvar PATTERN_LENGTH_TOO_LARGE = function PATTERN_LENGTH_TOO_LARGE(max) {\n  return \"Pattern length exceeds max of \".concat(max, \".\");\n};\n\nvar MISSING_KEY_PROPERTY = function MISSING_KEY_PROPERTY(name) {\n  return \"Missing \".concat(name, \" property in key\");\n};\n\nvar INVALID_KEY_WEIGHT_VALUE = function INVALID_KEY_WEIGHT_VALUE(key) {\n  return \"Property 'weight' in key '\".concat(key, \"' must be a positive integer\");\n};\n\nvar hasOwn = Object.prototype.hasOwnProperty;\n\nvar KeyStore = /*#__PURE__*/function () {\n  function KeyStore(keys) {\n    var _this = this;\n\n    _classCallCheck(this, KeyStore);\n\n    this._keys = [];\n    this._keyMap = {};\n    var totalWeight = 0;\n    keys.forEach(function (key) {\n      var obj = createKey(key);\n      totalWeight += obj.weight;\n\n      _this._keys.push(obj);\n\n      _this._keyMap[obj.id] = obj;\n      totalWeight += obj.weight;\n    }); // Normalize weights so that their sum is equal to 1\n\n    this._keys.forEach(function (key) {\n      key.weight /= totalWeight;\n    });\n  }\n\n  _createClass(KeyStore, [{\n    key: \"get\",\n    value: function get(keyId) {\n      return this._keyMap[keyId];\n    }\n  }, {\n    key: \"keys\",\n    value: function keys() {\n      return this._keys;\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return JSON.stringify(this._keys);\n    }\n  }]);\n\n  return KeyStore;\n}();\n\nfunction createKey(key) {\n  var path = null;\n  var id = null;\n  var src = null;\n  var weight = 1;\n  var getFn = null;\n\n  if (isString(key) || isArray(key)) {\n    src = key;\n    path = createKeyPath(key);\n    id = createKeyId(key);\n  } else {\n    if (!hasOwn.call(key, 'name')) {\n      throw new Error(MISSING_KEY_PROPERTY('name'));\n    }\n\n    var name = key.name;\n    src = name;\n\n    if (hasOwn.call(key, 'weight')) {\n      weight = key.weight;\n\n      if (weight <= 0) {\n        throw new Error(INVALID_KEY_WEIGHT_VALUE(name));\n      }\n    }\n\n    path = createKeyPath(name);\n    id = createKeyId(name);\n    getFn = key.getFn;\n  }\n\n  return {\n    path: path,\n    id: id,\n    weight: weight,\n    src: src,\n    getFn: getFn\n  };\n}\n\nfunction createKeyPath(key) {\n  return isArray(key) ? key : key.split('.');\n}\n\nfunction createKeyId(key) {\n  return isArray(key) ? key.join('.') : key;\n}\n\nfunction get(obj, path) {\n  var list = [];\n  var arr = false;\n\n  var deepGet = function deepGet(obj, path, index) {\n    if (!isDefined(obj)) {\n      return;\n    }\n\n    if (!path[index]) {\n      // If there's no path left, we've arrived at the object we care about.\n      list.push(obj);\n    } else {\n      var key = path[index];\n      var value = obj[key];\n\n      if (!isDefined(value)) {\n        return;\n      } // If we're at the last value in the path, and if it's a string/number/bool,\n      // add it to the list\n\n\n      if (index === path.length - 1 && (isString(value) || isNumber(value) || isBoolean(value))) {\n        list.push(toString(value));\n      } else if (isArray(value)) {\n        arr = true; // Search each item in the array.\n\n        for (var i = 0, len = value.length; i < len; i += 1) {\n          deepGet(value[i], path, index + 1);\n        }\n      } else if (path.length) {\n        // An object. Recurse further.\n        deepGet(value, path, index + 1);\n      }\n    }\n  }; // Backwards compatibility (since path used to be a string)\n\n\n  deepGet(obj, isString(path) ? path.split('.') : path, 0);\n  return arr ? list : list[0];\n}\n\nvar MatchOptions = {\n  // Whether the matches should be included in the result set. When `true`, each record in the result\n  // set will include the indices of the matched characters.\n  // These can consequently be used for highlighting purposes.\n  includeMatches: false,\n  // When `true`, the matching function will continue to the end of a search pattern even if\n  // a perfect match has already been located in the string.\n  findAllMatches: false,\n  // Minimum number of characters that must be matched before a result is considered a match\n  minMatchCharLength: 1\n};\nvar BasicOptions = {\n  // When `true`, the algorithm continues searching to the end of the input even if a perfect\n  // match is found before the end of the same input.\n  isCaseSensitive: false,\n  // When true, the matching function will continue to the end of a search pattern even if\n  includeScore: false,\n  // List of properties that will be searched. This also supports nested properties.\n  keys: [],\n  // Whether to sort the result list, by score\n  shouldSort: true,\n  // Default sort function: sort by ascending score, ascending index\n  sortFn: function sortFn(a, b) {\n    return a.score === b.score ? a.idx < b.idx ? -1 : 1 : a.score < b.score ? -1 : 1;\n  }\n};\nvar FuzzyOptions = {\n  // Approximately where in the text is the pattern expected to be found?\n  location: 0,\n  // At what point does the match algorithm give up. A threshold of '0.0' requires a perfect match\n  // (of both letters and location), a threshold of '1.0' would match anything.\n  threshold: 0.6,\n  // Determines how close the match must be to the fuzzy location (specified above).\n  // An exact letter match which is 'distance' characters away from the fuzzy location\n  // would score as a complete mismatch. A distance of '0' requires the match be at\n  // the exact location specified, a threshold of '1000' would require a perfect match\n  // to be within 800 characters of the fuzzy location to be found using a 0.8 threshold.\n  distance: 100\n};\nvar AdvancedOptions = {\n  // When `true`, it enables the use of unix-like search commands\n  useExtendedSearch: false,\n  // The get function to use when fetching an object's properties.\n  // The default will search nested paths *ie foo.bar.baz*\n  getFn: get,\n  // When `true`, search will ignore `location` and `distance`, so it won't matter\n  // where in the string the pattern appears.\n  // More info: https://fusejs.io/concepts/scoring-theory.html#fuzziness-score\n  ignoreLocation: false,\n  // When `true`, the calculation for the relevance score (used for sorting) will\n  // ignore the field-length norm.\n  // More info: https://fusejs.io/concepts/scoring-theory.html#field-length-norm\n  ignoreFieldNorm: false,\n  // The weight to determine how much field length norm effects scoring.\n  fieldNormWeight: 1\n};\n\nvar Config = _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, BasicOptions), MatchOptions), FuzzyOptions), AdvancedOptions);\n\nvar SPACE = /[^ ]+/g; // Field-length norm: the shorter the field, the higher the weight.\n// Set to 3 decimals to reduce index size.\n\nfunction norm() {\n  var weight = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n  var mantissa = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 3;\n  var cache = new Map();\n  var m = Math.pow(10, mantissa);\n  return {\n    get: function get(value) {\n      var numTokens = value.match(SPACE).length;\n\n      if (cache.has(numTokens)) {\n        return cache.get(numTokens);\n      } // Default function is 1/sqrt(x), weight makes that variable\n\n\n      var norm = 1 / Math.pow(numTokens, 0.5 * weight); // In place of `toFixed(mantissa)`, for faster computation\n\n      var n = parseFloat(Math.round(norm * m) / m);\n      cache.set(numTokens, n);\n      return n;\n    },\n    clear: function clear() {\n      cache.clear();\n    }\n  };\n}\n\nvar FuseIndex = /*#__PURE__*/function () {\n  function FuseIndex() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        _ref$getFn = _ref.getFn,\n        getFn = _ref$getFn === void 0 ? Config.getFn : _ref$getFn,\n        _ref$fieldNormWeight = _ref.fieldNormWeight,\n        fieldNormWeight = _ref$fieldNormWeight === void 0 ? Config.fieldNormWeight : _ref$fieldNormWeight;\n\n    _classCallCheck(this, FuseIndex);\n\n    this.norm = norm(fieldNormWeight, 3);\n    this.getFn = getFn;\n    this.isCreated = false;\n    this.setIndexRecords();\n  }\n\n  _createClass(FuseIndex, [{\n    key: \"setSources\",\n    value: function setSources() {\n      var docs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      this.docs = docs;\n    }\n  }, {\n    key: \"setIndexRecords\",\n    value: function setIndexRecords() {\n      var records = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      this.records = records;\n    }\n  }, {\n    key: \"setKeys\",\n    value: function setKeys() {\n      var _this2 = this;\n\n      var keys = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      this.keys = keys;\n      this._keysMap = {};\n      keys.forEach(function (key, idx) {\n        _this2._keysMap[key.id] = idx;\n      });\n    }\n  }, {\n    key: \"create\",\n    value: function create() {\n      var _this3 = this;\n\n      if (this.isCreated || !this.docs.length) {\n        return;\n      }\n\n      this.isCreated = true; // List is Array<String>\n\n      if (isString(this.docs[0])) {\n        this.docs.forEach(function (doc, docIndex) {\n          _this3._addString(doc, docIndex);\n        });\n      } else {\n        // List is Array<Object>\n        this.docs.forEach(function (doc, docIndex) {\n          _this3._addObject(doc, docIndex);\n        });\n      }\n\n      this.norm.clear();\n    } // Adds a doc to the end of the index\n\n  }, {\n    key: \"add\",\n    value: function add(doc) {\n      var idx = this.size();\n\n      if (isString(doc)) {\n        this._addString(doc, idx);\n      } else {\n        this._addObject(doc, idx);\n      }\n    } // Removes the doc at the specified index of the index\n\n  }, {\n    key: \"removeAt\",\n    value: function removeAt(idx) {\n      this.records.splice(idx, 1); // Change ref index of every subsquent doc\n\n      for (var i = idx, len = this.size(); i < len; i += 1) {\n        this.records[i].i -= 1;\n      }\n    }\n  }, {\n    key: \"getValueForItemAtKeyId\",\n    value: function getValueForItemAtKeyId(item, keyId) {\n      return item[this._keysMap[keyId]];\n    }\n  }, {\n    key: \"size\",\n    value: function size() {\n      return this.records.length;\n    }\n  }, {\n    key: \"_addString\",\n    value: function _addString(doc, docIndex) {\n      if (!isDefined(doc) || isBlank(doc)) {\n        return;\n      }\n\n      var record = {\n        v: doc,\n        i: docIndex,\n        n: this.norm.get(doc)\n      };\n      this.records.push(record);\n    }\n  }, {\n    key: \"_addObject\",\n    value: function _addObject(doc, docIndex) {\n      var _this4 = this;\n\n      var record = {\n        i: docIndex,\n        $: {}\n      }; // Iterate over every key (i.e, path), and fetch the value at that key\n\n      this.keys.forEach(function (key, keyIndex) {\n        var value = key.getFn ? key.getFn(doc) : _this4.getFn(doc, key.path);\n\n        if (!isDefined(value)) {\n          return;\n        }\n\n        if (isArray(value)) {\n          (function () {\n            var subRecords = [];\n            var stack = [{\n              nestedArrIndex: -1,\n              value: value\n            }];\n\n            while (stack.length) {\n              var _stack$pop = stack.pop(),\n                  nestedArrIndex = _stack$pop.nestedArrIndex,\n                  _value = _stack$pop.value;\n\n              if (!isDefined(_value)) {\n                continue;\n              }\n\n              if (isString(_value) && !isBlank(_value)) {\n                var subRecord = {\n                  v: _value,\n                  i: nestedArrIndex,\n                  n: _this4.norm.get(_value)\n                };\n                subRecords.push(subRecord);\n              } else if (isArray(_value)) {\n                _value.forEach(function (item, k) {\n                  stack.push({\n                    nestedArrIndex: k,\n                    value: item\n                  });\n                });\n              } else ;\n            }\n\n            record.$[keyIndex] = subRecords;\n          })();\n        } else if (isString(value) && !isBlank(value)) {\n          var subRecord = {\n            v: value,\n            n: _this4.norm.get(value)\n          };\n          record.$[keyIndex] = subRecord;\n        }\n      });\n      this.records.push(record);\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        keys: this.keys,\n        records: this.records\n      };\n    }\n  }]);\n\n  return FuseIndex;\n}();\n\nfunction createIndex(keys, docs) {\n  var _ref2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n      _ref2$getFn = _ref2.getFn,\n      getFn = _ref2$getFn === void 0 ? Config.getFn : _ref2$getFn,\n      _ref2$fieldNormWeight = _ref2.fieldNormWeight,\n      fieldNormWeight = _ref2$fieldNormWeight === void 0 ? Config.fieldNormWeight : _ref2$fieldNormWeight;\n\n  var myIndex = new FuseIndex({\n    getFn: getFn,\n    fieldNormWeight: fieldNormWeight\n  });\n  myIndex.setKeys(keys.map(createKey));\n  myIndex.setSources(docs);\n  myIndex.create();\n  return myIndex;\n}\n\nfunction parseIndex(data) {\n  var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref3$getFn = _ref3.getFn,\n      getFn = _ref3$getFn === void 0 ? Config.getFn : _ref3$getFn,\n      _ref3$fieldNormWeight = _ref3.fieldNormWeight,\n      fieldNormWeight = _ref3$fieldNormWeight === void 0 ? Config.fieldNormWeight : _ref3$fieldNormWeight;\n\n  var keys = data.keys,\n      records = data.records;\n  var myIndex = new FuseIndex({\n    getFn: getFn,\n    fieldNormWeight: fieldNormWeight\n  });\n  myIndex.setKeys(keys);\n  myIndex.setIndexRecords(records);\n  return myIndex;\n}\n\nfunction computeScore$1(pattern) {\n  var _ref4 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref4$errors = _ref4.errors,\n      errors = _ref4$errors === void 0 ? 0 : _ref4$errors,\n      _ref4$currentLocation = _ref4.currentLocation,\n      currentLocation = _ref4$currentLocation === void 0 ? 0 : _ref4$currentLocation,\n      _ref4$expectedLocatio = _ref4.expectedLocation,\n      expectedLocation = _ref4$expectedLocatio === void 0 ? 0 : _ref4$expectedLocatio,\n      _ref4$distance = _ref4.distance,\n      distance = _ref4$distance === void 0 ? Config.distance : _ref4$distance,\n      _ref4$ignoreLocation = _ref4.ignoreLocation,\n      ignoreLocation = _ref4$ignoreLocation === void 0 ? Config.ignoreLocation : _ref4$ignoreLocation;\n\n  var accuracy = errors / pattern.length;\n\n  if (ignoreLocation) {\n    return accuracy;\n  }\n\n  var proximity = Math.abs(expectedLocation - currentLocation);\n\n  if (!distance) {\n    // Dodge divide by zero error.\n    return proximity ? 1.0 : accuracy;\n  }\n\n  return accuracy + proximity / distance;\n}\n\nfunction convertMaskToIndices() {\n  var matchmask = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var minMatchCharLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Config.minMatchCharLength;\n  var indices = [];\n  var start = -1;\n  var end = -1;\n  var i = 0;\n\n  for (var len = matchmask.length; i < len; i += 1) {\n    var match = matchmask[i];\n\n    if (match && start === -1) {\n      start = i;\n    } else if (!match && start !== -1) {\n      end = i - 1;\n\n      if (end - start + 1 >= minMatchCharLength) {\n        indices.push([start, end]);\n      }\n\n      start = -1;\n    }\n  } // (i-1 - start) + 1 => i - start\n\n\n  if (matchmask[i - 1] && i - start >= minMatchCharLength) {\n    indices.push([start, i - 1]);\n  }\n\n  return indices;\n} // Machine word size\n\n\nvar MAX_BITS = 32;\n\nfunction search(text, pattern, patternAlphabet) {\n  var _ref5 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {},\n      _ref5$location = _ref5.location,\n      location = _ref5$location === void 0 ? Config.location : _ref5$location,\n      _ref5$distance = _ref5.distance,\n      distance = _ref5$distance === void 0 ? Config.distance : _ref5$distance,\n      _ref5$threshold = _ref5.threshold,\n      threshold = _ref5$threshold === void 0 ? Config.threshold : _ref5$threshold,\n      _ref5$findAllMatches = _ref5.findAllMatches,\n      findAllMatches = _ref5$findAllMatches === void 0 ? Config.findAllMatches : _ref5$findAllMatches,\n      _ref5$minMatchCharLen = _ref5.minMatchCharLength,\n      minMatchCharLength = _ref5$minMatchCharLen === void 0 ? Config.minMatchCharLength : _ref5$minMatchCharLen,\n      _ref5$includeMatches = _ref5.includeMatches,\n      includeMatches = _ref5$includeMatches === void 0 ? Config.includeMatches : _ref5$includeMatches,\n      _ref5$ignoreLocation = _ref5.ignoreLocation,\n      ignoreLocation = _ref5$ignoreLocation === void 0 ? Config.ignoreLocation : _ref5$ignoreLocation;\n\n  if (pattern.length > MAX_BITS) {\n    throw new Error(PATTERN_LENGTH_TOO_LARGE(MAX_BITS));\n  }\n\n  var patternLen = pattern.length; // Set starting location at beginning text and initialize the alphabet.\n\n  var textLen = text.length; // Handle the case when location > text.length\n\n  var expectedLocation = Math.max(0, Math.min(location, textLen)); // Highest score beyond which we give up.\n\n  var currentThreshold = threshold; // Is there a nearby exact match? (speedup)\n\n  var bestLocation = expectedLocation; // Performance: only computer matches when the minMatchCharLength > 1\n  // OR if `includeMatches` is true.\n\n  var computeMatches = minMatchCharLength > 1 || includeMatches; // A mask of the matches, used for building the indices\n\n  var matchMask = computeMatches ? Array(textLen) : [];\n  var index; // Get all exact matches, here for speed up\n\n  while ((index = text.indexOf(pattern, bestLocation)) > -1) {\n    var score = computeScore$1(pattern, {\n      currentLocation: index,\n      expectedLocation: expectedLocation,\n      distance: distance,\n      ignoreLocation: ignoreLocation\n    });\n    currentThreshold = Math.min(score, currentThreshold);\n    bestLocation = index + patternLen;\n\n    if (computeMatches) {\n      var i = 0;\n\n      while (i < patternLen) {\n        matchMask[index + i] = 1;\n        i += 1;\n      }\n    }\n  } // Reset the best location\n\n\n  bestLocation = -1;\n  var lastBitArr = [];\n  var finalScore = 1;\n  var binMax = patternLen + textLen;\n  var mask = 1 << patternLen - 1;\n\n  for (var _i = 0; _i < patternLen; _i += 1) {\n    // Scan for the best match; each iteration allows for one more error.\n    // Run a binary search to determine how far from the match location we can stray\n    // at this error level.\n    var binMin = 0;\n    var binMid = binMax;\n\n    while (binMin < binMid) {\n      var _score2 = computeScore$1(pattern, {\n        errors: _i,\n        currentLocation: expectedLocation + binMid,\n        expectedLocation: expectedLocation,\n        distance: distance,\n        ignoreLocation: ignoreLocation\n      });\n\n      if (_score2 <= currentThreshold) {\n        binMin = binMid;\n      } else {\n        binMax = binMid;\n      }\n\n      binMid = Math.floor((binMax - binMin) / 2 + binMin);\n    } // Use the result from this iteration as the maximum for the next.\n\n\n    binMax = binMid;\n    var start = Math.max(1, expectedLocation - binMid + 1);\n    var finish = findAllMatches ? textLen : Math.min(expectedLocation + binMid, textLen) + patternLen; // Initialize the bit array\n\n    var bitArr = Array(finish + 2);\n    bitArr[finish + 1] = (1 << _i) - 1;\n\n    for (var j = finish; j >= start; j -= 1) {\n      var currentLocation = j - 1;\n      var charMatch = patternAlphabet[text.charAt(currentLocation)];\n\n      if (computeMatches) {\n        // Speed up: quick bool to int conversion (i.e, `charMatch ? 1 : 0`)\n        matchMask[currentLocation] = +!!charMatch;\n      } // First pass: exact match\n\n\n      bitArr[j] = (bitArr[j + 1] << 1 | 1) & charMatch; // Subsequent passes: fuzzy match\n\n      if (_i) {\n        bitArr[j] |= (lastBitArr[j + 1] | lastBitArr[j]) << 1 | 1 | lastBitArr[j + 1];\n      }\n\n      if (bitArr[j] & mask) {\n        finalScore = computeScore$1(pattern, {\n          errors: _i,\n          currentLocation: currentLocation,\n          expectedLocation: expectedLocation,\n          distance: distance,\n          ignoreLocation: ignoreLocation\n        }); // This match will almost certainly be better than any existing match.\n        // But check anyway.\n\n        if (finalScore <= currentThreshold) {\n          // Indeed it is\n          currentThreshold = finalScore;\n          bestLocation = currentLocation; // Already passed `loc`, downhill from here on in.\n\n          if (bestLocation <= expectedLocation) {\n            break;\n          } // When passing `bestLocation`, don't exceed our current distance from `expectedLocation`.\n\n\n          start = Math.max(1, 2 * expectedLocation - bestLocation);\n        }\n      }\n    } // No hope for a (better) match at greater error levels.\n\n\n    var _score = computeScore$1(pattern, {\n      errors: _i + 1,\n      currentLocation: expectedLocation,\n      expectedLocation: expectedLocation,\n      distance: distance,\n      ignoreLocation: ignoreLocation\n    });\n\n    if (_score > currentThreshold) {\n      break;\n    }\n\n    lastBitArr = bitArr;\n  }\n\n  var result = {\n    isMatch: bestLocation >= 0,\n    // Count exact matches (those with a score of 0) to be \"almost\" exact\n    score: Math.max(0.001, finalScore)\n  };\n\n  if (computeMatches) {\n    var indices = convertMaskToIndices(matchMask, minMatchCharLength);\n\n    if (!indices.length) {\n      result.isMatch = false;\n    } else if (includeMatches) {\n      result.indices = indices;\n    }\n  }\n\n  return result;\n}\n\nfunction createPatternAlphabet(pattern) {\n  var mask = {};\n\n  for (var i = 0, len = pattern.length; i < len; i += 1) {\n    var char = pattern.charAt(i);\n    mask[char] = (mask[char] || 0) | 1 << len - i - 1;\n  }\n\n  return mask;\n}\n\nvar BitapSearch = /*#__PURE__*/function () {\n  function BitapSearch(pattern) {\n    var _this5 = this;\n\n    var _ref6 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref6$location = _ref6.location,\n        location = _ref6$location === void 0 ? Config.location : _ref6$location,\n        _ref6$threshold = _ref6.threshold,\n        threshold = _ref6$threshold === void 0 ? Config.threshold : _ref6$threshold,\n        _ref6$distance = _ref6.distance,\n        distance = _ref6$distance === void 0 ? Config.distance : _ref6$distance,\n        _ref6$includeMatches = _ref6.includeMatches,\n        includeMatches = _ref6$includeMatches === void 0 ? Config.includeMatches : _ref6$includeMatches,\n        _ref6$findAllMatches = _ref6.findAllMatches,\n        findAllMatches = _ref6$findAllMatches === void 0 ? Config.findAllMatches : _ref6$findAllMatches,\n        _ref6$minMatchCharLen = _ref6.minMatchCharLength,\n        minMatchCharLength = _ref6$minMatchCharLen === void 0 ? Config.minMatchCharLength : _ref6$minMatchCharLen,\n        _ref6$isCaseSensitive = _ref6.isCaseSensitive,\n        isCaseSensitive = _ref6$isCaseSensitive === void 0 ? Config.isCaseSensitive : _ref6$isCaseSensitive,\n        _ref6$ignoreLocation = _ref6.ignoreLocation,\n        ignoreLocation = _ref6$ignoreLocation === void 0 ? Config.ignoreLocation : _ref6$ignoreLocation;\n\n    _classCallCheck(this, BitapSearch);\n\n    this.options = {\n      location: location,\n      threshold: threshold,\n      distance: distance,\n      includeMatches: includeMatches,\n      findAllMatches: findAllMatches,\n      minMatchCharLength: minMatchCharLength,\n      isCaseSensitive: isCaseSensitive,\n      ignoreLocation: ignoreLocation\n    };\n    this.pattern = isCaseSensitive ? pattern : pattern.toLowerCase();\n    this.chunks = [];\n\n    if (!this.pattern.length) {\n      return;\n    }\n\n    var addChunk = function addChunk(pattern, startIndex) {\n      _this5.chunks.push({\n        pattern: pattern,\n        alphabet: createPatternAlphabet(pattern),\n        startIndex: startIndex\n      });\n    };\n\n    var len = this.pattern.length;\n\n    if (len > MAX_BITS) {\n      var i = 0;\n      var remainder = len % MAX_BITS;\n      var end = len - remainder;\n\n      while (i < end) {\n        addChunk(this.pattern.substr(i, MAX_BITS), i);\n        i += MAX_BITS;\n      }\n\n      if (remainder) {\n        var startIndex = len - MAX_BITS;\n        addChunk(this.pattern.substr(startIndex), startIndex);\n      }\n    } else {\n      addChunk(this.pattern, 0);\n    }\n  }\n\n  _createClass(BitapSearch, [{\n    key: \"searchIn\",\n    value: function searchIn(text) {\n      var _this$options = this.options,\n          isCaseSensitive = _this$options.isCaseSensitive,\n          includeMatches = _this$options.includeMatches;\n\n      if (!isCaseSensitive) {\n        text = text.toLowerCase();\n      } // Exact match\n\n\n      if (this.pattern === text) {\n        var _result = {\n          isMatch: true,\n          score: 0\n        };\n\n        if (includeMatches) {\n          _result.indices = [[0, text.length - 1]];\n        }\n\n        return _result;\n      } // Otherwise, use Bitap algorithm\n\n\n      var _this$options2 = this.options,\n          location = _this$options2.location,\n          distance = _this$options2.distance,\n          threshold = _this$options2.threshold,\n          findAllMatches = _this$options2.findAllMatches,\n          minMatchCharLength = _this$options2.minMatchCharLength,\n          ignoreLocation = _this$options2.ignoreLocation;\n      var allIndices = [];\n      var totalScore = 0;\n      var hasMatches = false;\n      this.chunks.forEach(function (_ref7) {\n        var pattern = _ref7.pattern,\n            alphabet = _ref7.alphabet,\n            startIndex = _ref7.startIndex;\n\n        var _search = search(text, pattern, alphabet, {\n          location: location + startIndex,\n          distance: distance,\n          threshold: threshold,\n          findAllMatches: findAllMatches,\n          minMatchCharLength: minMatchCharLength,\n          includeMatches: includeMatches,\n          ignoreLocation: ignoreLocation\n        }),\n            isMatch = _search.isMatch,\n            score = _search.score,\n            indices = _search.indices;\n\n        if (isMatch) {\n          hasMatches = true;\n        }\n\n        totalScore += score;\n\n        if (isMatch && indices) {\n          allIndices = [].concat(_toConsumableArray(allIndices), _toConsumableArray(indices));\n        }\n      });\n      var result = {\n        isMatch: hasMatches,\n        score: hasMatches ? totalScore / this.chunks.length : 1\n      };\n\n      if (hasMatches && includeMatches) {\n        result.indices = allIndices;\n      }\n\n      return result;\n    }\n  }]);\n\n  return BitapSearch;\n}();\n\nvar BaseMatch = /*#__PURE__*/function () {\n  function BaseMatch(pattern) {\n    _classCallCheck(this, BaseMatch);\n\n    this.pattern = pattern;\n  }\n\n  _createClass(BaseMatch, [{\n    key: \"search\",\n    value: function\n      /*text*/\n    search() {}\n  }], [{\n    key: \"isMultiMatch\",\n    value: function isMultiMatch(pattern) {\n      return getMatch(pattern, this.multiRegex);\n    }\n  }, {\n    key: \"isSingleMatch\",\n    value: function isSingleMatch(pattern) {\n      return getMatch(pattern, this.singleRegex);\n    }\n  }]);\n\n  return BaseMatch;\n}();\n\nfunction getMatch(pattern, exp) {\n  var matches = pattern.match(exp);\n  return matches ? matches[1] : null;\n} // Token: 'file\n\n\nvar ExactMatch = /*#__PURE__*/function (_BaseMatch) {\n  _inherits(ExactMatch, _BaseMatch);\n\n  var _super = _createSuper(ExactMatch);\n\n  function ExactMatch(pattern) {\n    _classCallCheck(this, ExactMatch);\n\n    return _super.call(this, pattern);\n  }\n\n  _createClass(ExactMatch, [{\n    key: \"search\",\n    value: function search(text) {\n      var isMatch = text === this.pattern;\n      return {\n        isMatch: isMatch,\n        score: isMatch ? 0 : 1,\n        indices: [0, this.pattern.length - 1]\n      };\n    }\n  }], [{\n    key: \"type\",\n    get: function get() {\n      return 'exact';\n    }\n  }, {\n    key: \"multiRegex\",\n    get: function get() {\n      return /^=\"(.*)\"$/;\n    }\n  }, {\n    key: \"singleRegex\",\n    get: function get() {\n      return /^=(.*)$/;\n    }\n  }]);\n\n  return ExactMatch;\n}(BaseMatch); // Token: !fire\n\n\nvar InverseExactMatch = /*#__PURE__*/function (_BaseMatch2) {\n  _inherits(InverseExactMatch, _BaseMatch2);\n\n  var _super2 = _createSuper(InverseExactMatch);\n\n  function InverseExactMatch(pattern) {\n    _classCallCheck(this, InverseExactMatch);\n\n    return _super2.call(this, pattern);\n  }\n\n  _createClass(InverseExactMatch, [{\n    key: \"search\",\n    value: function search(text) {\n      var index = text.indexOf(this.pattern);\n      var isMatch = index === -1;\n      return {\n        isMatch: isMatch,\n        score: isMatch ? 0 : 1,\n        indices: [0, text.length - 1]\n      };\n    }\n  }], [{\n    key: \"type\",\n    get: function get() {\n      return 'inverse-exact';\n    }\n  }, {\n    key: \"multiRegex\",\n    get: function get() {\n      return /^!\"(.*)\"$/;\n    }\n  }, {\n    key: \"singleRegex\",\n    get: function get() {\n      return /^!(.*)$/;\n    }\n  }]);\n\n  return InverseExactMatch;\n}(BaseMatch); // Token: ^file\n\n\nvar PrefixExactMatch = /*#__PURE__*/function (_BaseMatch3) {\n  _inherits(PrefixExactMatch, _BaseMatch3);\n\n  var _super3 = _createSuper(PrefixExactMatch);\n\n  function PrefixExactMatch(pattern) {\n    _classCallCheck(this, PrefixExactMatch);\n\n    return _super3.call(this, pattern);\n  }\n\n  _createClass(PrefixExactMatch, [{\n    key: \"search\",\n    value: function search(text) {\n      var isMatch = text.startsWith(this.pattern);\n      return {\n        isMatch: isMatch,\n        score: isMatch ? 0 : 1,\n        indices: [0, this.pattern.length - 1]\n      };\n    }\n  }], [{\n    key: \"type\",\n    get: function get() {\n      return 'prefix-exact';\n    }\n  }, {\n    key: \"multiRegex\",\n    get: function get() {\n      return /^\\^\"(.*)\"$/;\n    }\n  }, {\n    key: \"singleRegex\",\n    get: function get() {\n      return /^\\^(.*)$/;\n    }\n  }]);\n\n  return PrefixExactMatch;\n}(BaseMatch); // Token: !^fire\n\n\nvar InversePrefixExactMatch = /*#__PURE__*/function (_BaseMatch4) {\n  _inherits(InversePrefixExactMatch, _BaseMatch4);\n\n  var _super4 = _createSuper(InversePrefixExactMatch);\n\n  function InversePrefixExactMatch(pattern) {\n    _classCallCheck(this, InversePrefixExactMatch);\n\n    return _super4.call(this, pattern);\n  }\n\n  _createClass(InversePrefixExactMatch, [{\n    key: \"search\",\n    value: function search(text) {\n      var isMatch = !text.startsWith(this.pattern);\n      return {\n        isMatch: isMatch,\n        score: isMatch ? 0 : 1,\n        indices: [0, text.length - 1]\n      };\n    }\n  }], [{\n    key: \"type\",\n    get: function get() {\n      return 'inverse-prefix-exact';\n    }\n  }, {\n    key: \"multiRegex\",\n    get: function get() {\n      return /^!\\^\"(.*)\"$/;\n    }\n  }, {\n    key: \"singleRegex\",\n    get: function get() {\n      return /^!\\^(.*)$/;\n    }\n  }]);\n\n  return InversePrefixExactMatch;\n}(BaseMatch); // Token: .file$\n\n\nvar SuffixExactMatch = /*#__PURE__*/function (_BaseMatch5) {\n  _inherits(SuffixExactMatch, _BaseMatch5);\n\n  var _super5 = _createSuper(SuffixExactMatch);\n\n  function SuffixExactMatch(pattern) {\n    _classCallCheck(this, SuffixExactMatch);\n\n    return _super5.call(this, pattern);\n  }\n\n  _createClass(SuffixExactMatch, [{\n    key: \"search\",\n    value: function search(text) {\n      var isMatch = text.endsWith(this.pattern);\n      return {\n        isMatch: isMatch,\n        score: isMatch ? 0 : 1,\n        indices: [text.length - this.pattern.length, text.length - 1]\n      };\n    }\n  }], [{\n    key: \"type\",\n    get: function get() {\n      return 'suffix-exact';\n    }\n  }, {\n    key: \"multiRegex\",\n    get: function get() {\n      return /^\"(.*)\"\\$$/;\n    }\n  }, {\n    key: \"singleRegex\",\n    get: function get() {\n      return /^(.*)\\$$/;\n    }\n  }]);\n\n  return SuffixExactMatch;\n}(BaseMatch); // Token: !.file$\n\n\nvar InverseSuffixExactMatch = /*#__PURE__*/function (_BaseMatch6) {\n  _inherits(InverseSuffixExactMatch, _BaseMatch6);\n\n  var _super6 = _createSuper(InverseSuffixExactMatch);\n\n  function InverseSuffixExactMatch(pattern) {\n    _classCallCheck(this, InverseSuffixExactMatch);\n\n    return _super6.call(this, pattern);\n  }\n\n  _createClass(InverseSuffixExactMatch, [{\n    key: \"search\",\n    value: function search(text) {\n      var isMatch = !text.endsWith(this.pattern);\n      return {\n        isMatch: isMatch,\n        score: isMatch ? 0 : 1,\n        indices: [0, text.length - 1]\n      };\n    }\n  }], [{\n    key: \"type\",\n    get: function get() {\n      return 'inverse-suffix-exact';\n    }\n  }, {\n    key: \"multiRegex\",\n    get: function get() {\n      return /^!\"(.*)\"\\$$/;\n    }\n  }, {\n    key: \"singleRegex\",\n    get: function get() {\n      return /^!(.*)\\$$/;\n    }\n  }]);\n\n  return InverseSuffixExactMatch;\n}(BaseMatch);\n\nvar FuzzyMatch = /*#__PURE__*/function (_BaseMatch7) {\n  _inherits(FuzzyMatch, _BaseMatch7);\n\n  var _super7 = _createSuper(FuzzyMatch);\n\n  function FuzzyMatch(pattern) {\n    var _this6;\n\n    var _ref8 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref8$location = _ref8.location,\n        location = _ref8$location === void 0 ? Config.location : _ref8$location,\n        _ref8$threshold = _ref8.threshold,\n        threshold = _ref8$threshold === void 0 ? Config.threshold : _ref8$threshold,\n        _ref8$distance = _ref8.distance,\n        distance = _ref8$distance === void 0 ? Config.distance : _ref8$distance,\n        _ref8$includeMatches = _ref8.includeMatches,\n        includeMatches = _ref8$includeMatches === void 0 ? Config.includeMatches : _ref8$includeMatches,\n        _ref8$findAllMatches = _ref8.findAllMatches,\n        findAllMatches = _ref8$findAllMatches === void 0 ? Config.findAllMatches : _ref8$findAllMatches,\n        _ref8$minMatchCharLen = _ref8.minMatchCharLength,\n        minMatchCharLength = _ref8$minMatchCharLen === void 0 ? Config.minMatchCharLength : _ref8$minMatchCharLen,\n        _ref8$isCaseSensitive = _ref8.isCaseSensitive,\n        isCaseSensitive = _ref8$isCaseSensitive === void 0 ? Config.isCaseSensitive : _ref8$isCaseSensitive,\n        _ref8$ignoreLocation = _ref8.ignoreLocation,\n        ignoreLocation = _ref8$ignoreLocation === void 0 ? Config.ignoreLocation : _ref8$ignoreLocation;\n\n    _classCallCheck(this, FuzzyMatch);\n\n    _this6 = _super7.call(this, pattern);\n    _this6._bitapSearch = new BitapSearch(pattern, {\n      location: location,\n      threshold: threshold,\n      distance: distance,\n      includeMatches: includeMatches,\n      findAllMatches: findAllMatches,\n      minMatchCharLength: minMatchCharLength,\n      isCaseSensitive: isCaseSensitive,\n      ignoreLocation: ignoreLocation\n    });\n    return _this6;\n  }\n\n  _createClass(FuzzyMatch, [{\n    key: \"search\",\n    value: function search(text) {\n      return this._bitapSearch.searchIn(text);\n    }\n  }], [{\n    key: \"type\",\n    get: function get() {\n      return 'fuzzy';\n    }\n  }, {\n    key: \"multiRegex\",\n    get: function get() {\n      return /^\"(.*)\"$/;\n    }\n  }, {\n    key: \"singleRegex\",\n    get: function get() {\n      return /^(.*)$/;\n    }\n  }]);\n\n  return FuzzyMatch;\n}(BaseMatch); // Token: 'file\n\n\nvar IncludeMatch = /*#__PURE__*/function (_BaseMatch8) {\n  _inherits(IncludeMatch, _BaseMatch8);\n\n  var _super8 = _createSuper(IncludeMatch);\n\n  function IncludeMatch(pattern) {\n    _classCallCheck(this, IncludeMatch);\n\n    return _super8.call(this, pattern);\n  }\n\n  _createClass(IncludeMatch, [{\n    key: \"search\",\n    value: function search(text) {\n      var location = 0;\n      var index;\n      var indices = [];\n      var patternLen = this.pattern.length; // Get all exact matches\n\n      while ((index = text.indexOf(this.pattern, location)) > -1) {\n        location = index + patternLen;\n        indices.push([index, location - 1]);\n      }\n\n      var isMatch = !!indices.length;\n      return {\n        isMatch: isMatch,\n        score: isMatch ? 0 : 1,\n        indices: indices\n      };\n    }\n  }], [{\n    key: \"type\",\n    get: function get() {\n      return 'include';\n    }\n  }, {\n    key: \"multiRegex\",\n    get: function get() {\n      return /^'\"(.*)\"$/;\n    }\n  }, {\n    key: \"singleRegex\",\n    get: function get() {\n      return /^'(.*)$/;\n    }\n  }]);\n\n  return IncludeMatch;\n}(BaseMatch); // ❗Order is important. DO NOT CHANGE.\n\n\nvar searchers = [ExactMatch, IncludeMatch, PrefixExactMatch, InversePrefixExactMatch, InverseSuffixExactMatch, SuffixExactMatch, InverseExactMatch, FuzzyMatch];\nvar searchersLen = searchers.length; // Regex to split by spaces, but keep anything in quotes together\n\nvar SPACE_RE = / +(?=(?:[^\\\"]*\\\"[^\\\"]*\\\")*[^\\\"]*$)/;\nvar OR_TOKEN = '|'; // Return a 2D array representation of the query, for simpler parsing.\n// Example:\n// \"^core go$ | rb$ | py$ xy$\" => [[\"^core\", \"go$\"], [\"rb$\"], [\"py$\", \"xy$\"]]\n\nfunction parseQuery(pattern) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return pattern.split(OR_TOKEN).map(function (item) {\n    var query = item.trim().split(SPACE_RE).filter(function (item) {\n      return item && !!item.trim();\n    });\n    var results = [];\n\n    for (var i = 0, len = query.length; i < len; i += 1) {\n      var queryItem = query[i]; // 1. Handle multiple query match (i.e, once that are quoted, like `\"hello world\"`)\n\n      var found = false;\n      var idx = -1;\n\n      while (!found && ++idx < searchersLen) {\n        var searcher = searchers[idx];\n        var token = searcher.isMultiMatch(queryItem);\n\n        if (token) {\n          results.push(new searcher(token, options));\n          found = true;\n        }\n      }\n\n      if (found) {\n        continue;\n      } // 2. Handle single query matches (i.e, once that are *not* quoted)\n\n\n      idx = -1;\n\n      while (++idx < searchersLen) {\n        var _searcher = searchers[idx];\n\n        var _token = _searcher.isSingleMatch(queryItem);\n\n        if (_token) {\n          results.push(new _searcher(_token, options));\n          break;\n        }\n      }\n    }\n\n    return results;\n  });\n} // These extended matchers can return an array of matches, as opposed\n// to a singl match\n\n\nvar MultiMatchSet = new Set([FuzzyMatch.type, IncludeMatch.type]);\n/**\n * Command-like searching\n * ======================\n *\n * Given multiple search terms delimited by spaces.e.g. `^jscript .python$ ruby !java`,\n * search in a given text.\n *\n * Search syntax:\n *\n * | Token       | Match type                 | Description                            |\n * | ----------- | -------------------------- | -------------------------------------- |\n * | `jscript`   | fuzzy-match                | Items that fuzzy match `jscript`       |\n * | `=scheme`   | exact-match                | Items that are `scheme`                |\n * | `'python`   | include-match              | Items that include `python`            |\n * | `!ruby`     | inverse-exact-match        | Items that do not include `ruby`       |\n * | `^java`     | prefix-exact-match         | Items that start with `java`           |\n * | `!^earlang` | inverse-prefix-exact-match | Items that do not start with `earlang` |\n * | `.js$`      | suffix-exact-match         | Items that end with `.js`              |\n * | `!.go$`     | inverse-suffix-exact-match | Items that do not end with `.go`       |\n *\n * A single pipe character acts as an OR operator. For example, the following\n * query matches entries that start with `core` and end with either`go`, `rb`,\n * or`py`.\n *\n * ```\n * ^core go$ | rb$ | py$\n * ```\n */\n\nvar ExtendedSearch = /*#__PURE__*/function () {\n  function ExtendedSearch(pattern) {\n    var _ref9 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref9$isCaseSensitive = _ref9.isCaseSensitive,\n        isCaseSensitive = _ref9$isCaseSensitive === void 0 ? Config.isCaseSensitive : _ref9$isCaseSensitive,\n        _ref9$includeMatches = _ref9.includeMatches,\n        includeMatches = _ref9$includeMatches === void 0 ? Config.includeMatches : _ref9$includeMatches,\n        _ref9$minMatchCharLen = _ref9.minMatchCharLength,\n        minMatchCharLength = _ref9$minMatchCharLen === void 0 ? Config.minMatchCharLength : _ref9$minMatchCharLen,\n        _ref9$ignoreLocation = _ref9.ignoreLocation,\n        ignoreLocation = _ref9$ignoreLocation === void 0 ? Config.ignoreLocation : _ref9$ignoreLocation,\n        _ref9$findAllMatches = _ref9.findAllMatches,\n        findAllMatches = _ref9$findAllMatches === void 0 ? Config.findAllMatches : _ref9$findAllMatches,\n        _ref9$location = _ref9.location,\n        location = _ref9$location === void 0 ? Config.location : _ref9$location,\n        _ref9$threshold = _ref9.threshold,\n        threshold = _ref9$threshold === void 0 ? Config.threshold : _ref9$threshold,\n        _ref9$distance = _ref9.distance,\n        distance = _ref9$distance === void 0 ? Config.distance : _ref9$distance;\n\n    _classCallCheck(this, ExtendedSearch);\n\n    this.query = null;\n    this.options = {\n      isCaseSensitive: isCaseSensitive,\n      includeMatches: includeMatches,\n      minMatchCharLength: minMatchCharLength,\n      findAllMatches: findAllMatches,\n      ignoreLocation: ignoreLocation,\n      location: location,\n      threshold: threshold,\n      distance: distance\n    };\n    this.pattern = isCaseSensitive ? pattern : pattern.toLowerCase();\n    this.query = parseQuery(this.pattern, this.options);\n  }\n\n  _createClass(ExtendedSearch, [{\n    key: \"searchIn\",\n    value: function searchIn(text) {\n      var query = this.query;\n\n      if (!query) {\n        return {\n          isMatch: false,\n          score: 1\n        };\n      }\n\n      var _this$options3 = this.options,\n          includeMatches = _this$options3.includeMatches,\n          isCaseSensitive = _this$options3.isCaseSensitive;\n      text = isCaseSensitive ? text : text.toLowerCase();\n      var numMatches = 0;\n      var allIndices = [];\n      var totalScore = 0; // ORs\n\n      for (var i = 0, qLen = query.length; i < qLen; i += 1) {\n        var _searchers = query[i]; // Reset indices\n\n        allIndices.length = 0;\n        numMatches = 0; // ANDs\n\n        for (var j = 0, pLen = _searchers.length; j < pLen; j += 1) {\n          var searcher = _searchers[j];\n\n          var _searcher$search = searcher.search(text),\n              isMatch = _searcher$search.isMatch,\n              indices = _searcher$search.indices,\n              score = _searcher$search.score;\n\n          if (isMatch) {\n            numMatches += 1;\n            totalScore += score;\n\n            if (includeMatches) {\n              var type = searcher.constructor.type;\n\n              if (MultiMatchSet.has(type)) {\n                allIndices = [].concat(_toConsumableArray(allIndices), _toConsumableArray(indices));\n              } else {\n                allIndices.push(indices);\n              }\n            }\n          } else {\n            totalScore = 0;\n            numMatches = 0;\n            allIndices.length = 0;\n            break;\n          }\n        } // OR condition, so if TRUE, return\n\n\n        if (numMatches) {\n          var result = {\n            isMatch: true,\n            score: totalScore / numMatches\n          };\n\n          if (includeMatches) {\n            result.indices = allIndices;\n          }\n\n          return result;\n        }\n      } // Nothing was matched\n\n\n      return {\n        isMatch: false,\n        score: 1\n      };\n    }\n  }], [{\n    key: \"condition\",\n    value: function condition(_, options) {\n      return options.useExtendedSearch;\n    }\n  }]);\n\n  return ExtendedSearch;\n}();\n\nvar registeredSearchers = [];\n\nfunction register() {\n  registeredSearchers.push.apply(registeredSearchers, arguments);\n}\n\nfunction createSearcher(pattern, options) {\n  for (var i = 0, len = registeredSearchers.length; i < len; i += 1) {\n    var searcherClass = registeredSearchers[i];\n\n    if (searcherClass.condition(pattern, options)) {\n      return new searcherClass(pattern, options);\n    }\n  }\n\n  return new BitapSearch(pattern, options);\n}\n\nvar LogicalOperator = {\n  AND: '$and',\n  OR: '$or'\n};\nvar KeyType = {\n  PATH: '$path',\n  PATTERN: '$val'\n};\n\nvar isExpression = function isExpression(query) {\n  return !!(query[LogicalOperator.AND] || query[LogicalOperator.OR]);\n};\n\nvar isPath = function isPath(query) {\n  return !!query[KeyType.PATH];\n};\n\nvar isLeaf = function isLeaf(query) {\n  return !isArray(query) && isObject(query) && !isExpression(query);\n};\n\nvar convertToExplicit = function convertToExplicit(query) {\n  return _defineProperty({}, LogicalOperator.AND, Object.keys(query).map(function (key) {\n    return _defineProperty({}, key, query[key]);\n  }));\n}; // When `auto` is `true`, the parse function will infer and initialize and add\n// the appropriate `Searcher` instance\n\n\nfunction parse(query, options) {\n  var _ref12 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n      _ref12$auto = _ref12.auto,\n      auto = _ref12$auto === void 0 ? true : _ref12$auto;\n\n  var next = function next(query) {\n    var keys = Object.keys(query);\n    var isQueryPath = isPath(query);\n\n    if (!isQueryPath && keys.length > 1 && !isExpression(query)) {\n      return next(convertToExplicit(query));\n    }\n\n    if (isLeaf(query)) {\n      var key = isQueryPath ? query[KeyType.PATH] : keys[0];\n      var pattern = isQueryPath ? query[KeyType.PATTERN] : query[key];\n\n      if (!isString(pattern)) {\n        throw new Error(LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY(key));\n      }\n\n      var obj = {\n        keyId: createKeyId(key),\n        pattern: pattern\n      };\n\n      if (auto) {\n        obj.searcher = createSearcher(pattern, options);\n      }\n\n      return obj;\n    }\n\n    var node = {\n      children: [],\n      operator: keys[0]\n    };\n    keys.forEach(function (key) {\n      var value = query[key];\n\n      if (isArray(value)) {\n        value.forEach(function (item) {\n          node.children.push(next(item));\n        });\n      }\n    });\n    return node;\n  };\n\n  if (!isExpression(query)) {\n    query = convertToExplicit(query);\n  }\n\n  return next(query);\n} // Practical scoring function\n\n\nfunction computeScore(results, _ref13) {\n  var _ref13$ignoreFieldNor = _ref13.ignoreFieldNorm,\n      ignoreFieldNorm = _ref13$ignoreFieldNor === void 0 ? Config.ignoreFieldNorm : _ref13$ignoreFieldNor;\n  results.forEach(function (result) {\n    var totalScore = 1;\n    result.matches.forEach(function (_ref14) {\n      var key = _ref14.key,\n          norm = _ref14.norm,\n          score = _ref14.score;\n      var weight = key ? key.weight : null;\n      totalScore *= Math.pow(score === 0 && weight ? Number.EPSILON : score, (weight || 1) * (ignoreFieldNorm ? 1 : norm));\n    });\n    result.score = totalScore;\n  });\n}\n\nfunction transformMatches(result, data) {\n  var matches = result.matches;\n  data.matches = [];\n\n  if (!isDefined(matches)) {\n    return;\n  }\n\n  matches.forEach(function (match) {\n    if (!isDefined(match.indices) || !match.indices.length) {\n      return;\n    }\n\n    var indices = match.indices,\n        value = match.value;\n    var obj = {\n      indices: indices,\n      value: value\n    };\n\n    if (match.key) {\n      obj.key = match.key.src;\n    }\n\n    if (match.idx > -1) {\n      obj.refIndex = match.idx;\n    }\n\n    data.matches.push(obj);\n  });\n}\n\nfunction transformScore(result, data) {\n  data.score = result.score;\n}\n\nfunction format(results, docs) {\n  var _ref15 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n      _ref15$includeMatches = _ref15.includeMatches,\n      includeMatches = _ref15$includeMatches === void 0 ? Config.includeMatches : _ref15$includeMatches,\n      _ref15$includeScore = _ref15.includeScore,\n      includeScore = _ref15$includeScore === void 0 ? Config.includeScore : _ref15$includeScore;\n\n  var transformers = [];\n  if (includeMatches) transformers.push(transformMatches);\n  if (includeScore) transformers.push(transformScore);\n  return results.map(function (result) {\n    var idx = result.idx;\n    var data = {\n      item: docs[idx],\n      refIndex: idx\n    };\n\n    if (transformers.length) {\n      transformers.forEach(function (transformer) {\n        transformer(result, data);\n      });\n    }\n\n    return data;\n  });\n}\n\nvar Fuse = /*#__PURE__*/function () {\n  function Fuse(docs) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var index = arguments.length > 2 ? arguments[2] : undefined;\n\n    _classCallCheck(this, Fuse);\n\n    this.options = _objectSpread(_objectSpread({}, Config), options);\n\n    if (this.options.useExtendedSearch && !true) {\n      throw new Error(EXTENDED_SEARCH_UNAVAILABLE);\n    }\n\n    this._keyStore = new KeyStore(this.options.keys);\n    this.setCollection(docs, index);\n  }\n\n  _createClass(Fuse, [{\n    key: \"setCollection\",\n    value: function setCollection(docs, index) {\n      this._docs = docs;\n\n      if (index && !(index instanceof FuseIndex)) {\n        throw new Error(INCORRECT_INDEX_TYPE);\n      }\n\n      this._myIndex = index || createIndex(this.options.keys, this._docs, {\n        getFn: this.options.getFn,\n        fieldNormWeight: this.options.fieldNormWeight\n      });\n    }\n  }, {\n    key: \"add\",\n    value: function add(doc) {\n      if (!isDefined(doc)) {\n        return;\n      }\n\n      this._docs.push(doc);\n\n      this._myIndex.add(doc);\n    }\n  }, {\n    key: \"remove\",\n    value: function remove() {\n      var predicate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function\n        /* doc, idx */\n      () {\n        return false;\n      };\n      var results = [];\n\n      for (var i = 0, len = this._docs.length; i < len; i += 1) {\n        var doc = this._docs[i];\n\n        if (predicate(doc, i)) {\n          this.removeAt(i);\n          i -= 1;\n          len -= 1;\n          results.push(doc);\n        }\n      }\n\n      return results;\n    }\n  }, {\n    key: \"removeAt\",\n    value: function removeAt(idx) {\n      this._docs.splice(idx, 1);\n\n      this._myIndex.removeAt(idx);\n    }\n  }, {\n    key: \"getIndex\",\n    value: function getIndex() {\n      return this._myIndex;\n    }\n  }, {\n    key: \"search\",\n    value: function search(query) {\n      var _ref16 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          _ref16$limit = _ref16.limit,\n          limit = _ref16$limit === void 0 ? -1 : _ref16$limit;\n\n      var _this$options4 = this.options,\n          includeMatches = _this$options4.includeMatches,\n          includeScore = _this$options4.includeScore,\n          shouldSort = _this$options4.shouldSort,\n          sortFn = _this$options4.sortFn,\n          ignoreFieldNorm = _this$options4.ignoreFieldNorm;\n      var results = isString(query) ? isString(this._docs[0]) ? this._searchStringList(query) : this._searchObjectList(query) : this._searchLogical(query);\n      computeScore(results, {\n        ignoreFieldNorm: ignoreFieldNorm\n      });\n\n      if (shouldSort) {\n        results.sort(sortFn);\n      }\n\n      if (isNumber(limit) && limit > -1) {\n        results = results.slice(0, limit);\n      }\n\n      return format(results, this._docs, {\n        includeMatches: includeMatches,\n        includeScore: includeScore\n      });\n    }\n  }, {\n    key: \"_searchStringList\",\n    value: function _searchStringList(query) {\n      var searcher = createSearcher(query, this.options);\n      var records = this._myIndex.records;\n      var results = []; // Iterate over every string in the index\n\n      records.forEach(function (_ref17) {\n        var text = _ref17.v,\n            idx = _ref17.i,\n            norm = _ref17.n;\n\n        if (!isDefined(text)) {\n          return;\n        }\n\n        var _searcher$searchIn = searcher.searchIn(text),\n            isMatch = _searcher$searchIn.isMatch,\n            score = _searcher$searchIn.score,\n            indices = _searcher$searchIn.indices;\n\n        if (isMatch) {\n          results.push({\n            item: text,\n            idx: idx,\n            matches: [{\n              score: score,\n              value: text,\n              norm: norm,\n              indices: indices\n            }]\n          });\n        }\n      });\n      return results;\n    }\n  }, {\n    key: \"_searchLogical\",\n    value: function _searchLogical(query) {\n      var _this7 = this;\n\n      var expression = parse(query, this.options);\n\n      var evaluate = function evaluate(node, item, idx) {\n        if (!node.children) {\n          var keyId = node.keyId,\n              searcher = node.searcher;\n\n          var matches = _this7._findMatches({\n            key: _this7._keyStore.get(keyId),\n            value: _this7._myIndex.getValueForItemAtKeyId(item, keyId),\n            searcher: searcher\n          });\n\n          if (matches && matches.length) {\n            return [{\n              idx: idx,\n              item: item,\n              matches: matches\n            }];\n          }\n\n          return [];\n        }\n\n        var res = [];\n\n        for (var i = 0, len = node.children.length; i < len; i += 1) {\n          var child = node.children[i];\n          var result = evaluate(child, item, idx);\n\n          if (result.length) {\n            res.push.apply(res, _toConsumableArray(result));\n          } else if (node.operator === LogicalOperator.AND) {\n            return [];\n          }\n        }\n\n        return res;\n      };\n\n      var records = this._myIndex.records;\n      var resultMap = {};\n      var results = [];\n      records.forEach(function (_ref18) {\n        var item = _ref18.$,\n            idx = _ref18.i;\n\n        if (isDefined(item)) {\n          var expResults = evaluate(expression, item, idx);\n\n          if (expResults.length) {\n            // Dedupe when adding\n            if (!resultMap[idx]) {\n              resultMap[idx] = {\n                idx: idx,\n                item: item,\n                matches: []\n              };\n              results.push(resultMap[idx]);\n            }\n\n            expResults.forEach(function (_ref19) {\n              var _resultMap$idx$matche;\n\n              var matches = _ref19.matches;\n\n              (_resultMap$idx$matche = resultMap[idx].matches).push.apply(_resultMap$idx$matche, _toConsumableArray(matches));\n            });\n          }\n        }\n      });\n      return results;\n    }\n  }, {\n    key: \"_searchObjectList\",\n    value: function _searchObjectList(query) {\n      var _this8 = this;\n\n      var searcher = createSearcher(query, this.options);\n      var _this$_myIndex = this._myIndex,\n          keys = _this$_myIndex.keys,\n          records = _this$_myIndex.records;\n      var results = []; // List is Array<Object>\n\n      records.forEach(function (_ref20) {\n        var item = _ref20.$,\n            idx = _ref20.i;\n\n        if (!isDefined(item)) {\n          return;\n        }\n\n        var matches = []; // Iterate over every key (i.e, path), and fetch the value at that key\n\n        keys.forEach(function (key, keyIndex) {\n          matches.push.apply(matches, _toConsumableArray(_this8._findMatches({\n            key: key,\n            value: item[keyIndex],\n            searcher: searcher\n          })));\n        });\n\n        if (matches.length) {\n          results.push({\n            idx: idx,\n            item: item,\n            matches: matches\n          });\n        }\n      });\n      return results;\n    }\n  }, {\n    key: \"_findMatches\",\n    value: function _findMatches(_ref21) {\n      var key = _ref21.key,\n          value = _ref21.value,\n          searcher = _ref21.searcher;\n\n      if (!isDefined(value)) {\n        return [];\n      }\n\n      var matches = [];\n\n      if (isArray(value)) {\n        value.forEach(function (_ref22) {\n          var text = _ref22.v,\n              idx = _ref22.i,\n              norm = _ref22.n;\n\n          if (!isDefined(text)) {\n            return;\n          }\n\n          var _searcher$searchIn2 = searcher.searchIn(text),\n              isMatch = _searcher$searchIn2.isMatch,\n              score = _searcher$searchIn2.score,\n              indices = _searcher$searchIn2.indices;\n\n          if (isMatch) {\n            matches.push({\n              score: score,\n              key: key,\n              value: text,\n              idx: idx,\n              norm: norm,\n              indices: indices\n            });\n          }\n        });\n      } else {\n        var text = value.v,\n            _norm = value.n;\n\n        var _searcher$searchIn3 = searcher.searchIn(text),\n            isMatch = _searcher$searchIn3.isMatch,\n            score = _searcher$searchIn3.score,\n            indices = _searcher$searchIn3.indices;\n\n        if (isMatch) {\n          matches.push({\n            score: score,\n            key: key,\n            value: text,\n            norm: _norm,\n            indices: indices\n          });\n        }\n      }\n\n      return matches;\n    }\n  }]);\n\n  return Fuse;\n}();\n\nFuse.version = '6.6.2';\nFuse.createIndex = createIndex;\nFuse.parseIndex = parseIndex;\nFuse.config = Config;\n{\n  Fuse.parseQuery = parse;\n}\n{\n  register(ExtendedSearch);\n}\nexport { Fuse as default };","map":{"version":3,"names":["isArray","value","Array","getTag","INFINITY","baseToString","result","toString","isString","isNumber","isBoolean","isObjectLike","isObject","isDefined","undefined","isBlank","trim","length","Object","prototype","call","EXTENDED_SEARCH_UNAVAILABLE","INCORRECT_INDEX_TYPE","LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY","key","PATTERN_LENGTH_TOO_LARGE","max","MISSING_KEY_PROPERTY","name","INVALID_KEY_WEIGHT_VALUE","hasOwn","hasOwnProperty","KeyStore","keys","_keys","_keyMap","totalWeight","forEach","obj","createKey","weight","push","id","keyId","JSON","stringify","path","src","getFn","createKeyPath","createKeyId","Error","split","join","get","list","arr","deepGet","index","i","len","MatchOptions","includeMatches","findAllMatches","minMatchCharLength","BasicOptions","isCaseSensitive","includeScore","shouldSort","sortFn","a","b","score","idx","FuzzyOptions","location","threshold","distance","AdvancedOptions","useExtendedSearch","ignoreLocation","ignoreFieldNorm","fieldNormWeight","Config","SPACE","norm","mantissa","cache","Map","m","Math","pow","numTokens","match","has","n","parseFloat","round","set","clear","FuseIndex","isCreated","setIndexRecords","docs","records","_keysMap","doc","docIndex","_addString","_addObject","size","splice","item","record","v","$","keyIndex","subRecords","stack","nestedArrIndex","pop","subRecord","k","createIndex","myIndex","setKeys","map","setSources","create","parseIndex","data","computeScore$1","pattern","errors","currentLocation","expectedLocation","accuracy","proximity","abs","convertMaskToIndices","matchmask","indices","start","end","MAX_BITS","search","text","patternAlphabet","patternLen","textLen","min","currentThreshold","bestLocation","computeMatches","matchMask","indexOf","lastBitArr","finalScore","binMax","mask","binMin","binMid","floor","finish","bitArr","j","charMatch","charAt","isMatch","createPatternAlphabet","char","BitapSearch","options","toLowerCase","chunks","addChunk","startIndex","alphabet","remainder","substr","allIndices","totalScore","hasMatches","BaseMatch","getMatch","multiRegex","singleRegex","exp","matches","ExactMatch","InverseExactMatch","PrefixExactMatch","startsWith","InversePrefixExactMatch","SuffixExactMatch","endsWith","InverseSuffixExactMatch","FuzzyMatch","_bitapSearch","searchIn","IncludeMatch","searchers","searchersLen","SPACE_RE","OR_TOKEN","parseQuery","query","filter","results","queryItem","found","searcher","token","isMultiMatch","isSingleMatch","MultiMatchSet","Set","type","ExtendedSearch","numMatches","qLen","pLen","constructor","_","registeredSearchers","register","createSearcher","searcherClass","condition","LogicalOperator","AND","OR","KeyType","PATH","PATTERN","isExpression","isPath","isLeaf","convertToExplicit","parse","auto","next","isQueryPath","node","children","operator","computeScore","Number","EPSILON","transformMatches","refIndex","transformScore","format","transformers","transformer","Fuse","_keyStore","setCollection","_docs","_myIndex","add","predicate","removeAt","limit","_searchStringList","_searchObjectList","_searchLogical","sort","slice","expression","evaluate","_findMatches","getValueForItemAtKeyId","res","child","resultMap","expResults","version","config","default"],"sources":["D:/download/notus-react-main/notus-react-main/node_modules/fuse.js/dist/fuse.esm.js"],"sourcesContent":["/**\n * Fuse.js v6.6.2 - Lightweight fuzzy-search (http://fusejs.io)\n *\n * Copyright (c) 2022 Kiro Risk (http://kiro.me)\n * All Rights Reserved. Apache Software License 2.0\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n */\n\nfunction isArray(value) {\n  return !Array.isArray\n    ? getTag(value) === '[object Array]'\n    : Array.isArray(value)\n}\n\n// Adapted from: https://github.com/lodash/lodash/blob/master/.internal/baseToString.js\nconst INFINITY = 1 / 0;\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value\n  }\n  let result = value + '';\n  return result == '0' && 1 / value == -INFINITY ? '-0' : result\n}\n\nfunction toString(value) {\n  return value == null ? '' : baseToString(value)\n}\n\nfunction isString(value) {\n  return typeof value === 'string'\n}\n\nfunction isNumber(value) {\n  return typeof value === 'number'\n}\n\n// Adapted from: https://github.com/lodash/lodash/blob/master/isBoolean.js\nfunction isBoolean(value) {\n  return (\n    value === true ||\n    value === false ||\n    (isObjectLike(value) && getTag(value) == '[object Boolean]')\n  )\n}\n\nfunction isObject(value) {\n  return typeof value === 'object'\n}\n\n// Checks if `value` is object-like.\nfunction isObjectLike(value) {\n  return isObject(value) && value !== null\n}\n\nfunction isDefined(value) {\n  return value !== undefined && value !== null\n}\n\nfunction isBlank(value) {\n  return !value.trim().length\n}\n\n// Gets the `toStringTag` of `value`.\n// Adapted from: https://github.com/lodash/lodash/blob/master/.internal/getTag.js\nfunction getTag(value) {\n  return value == null\n    ? value === undefined\n      ? '[object Undefined]'\n      : '[object Null]'\n    : Object.prototype.toString.call(value)\n}\n\nconst EXTENDED_SEARCH_UNAVAILABLE = 'Extended search is not available';\n\nconst INCORRECT_INDEX_TYPE = \"Incorrect 'index' type\";\n\nconst LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY = (key) =>\n  `Invalid value for key ${key}`;\n\nconst PATTERN_LENGTH_TOO_LARGE = (max) =>\n  `Pattern length exceeds max of ${max}.`;\n\nconst MISSING_KEY_PROPERTY = (name) => `Missing ${name} property in key`;\n\nconst INVALID_KEY_WEIGHT_VALUE = (key) =>\n  `Property 'weight' in key '${key}' must be a positive integer`;\n\nconst hasOwn = Object.prototype.hasOwnProperty;\n\nclass KeyStore {\n  constructor(keys) {\n    this._keys = [];\n    this._keyMap = {};\n\n    let totalWeight = 0;\n\n    keys.forEach((key) => {\n      let obj = createKey(key);\n\n      totalWeight += obj.weight;\n\n      this._keys.push(obj);\n      this._keyMap[obj.id] = obj;\n\n      totalWeight += obj.weight;\n    });\n\n    // Normalize weights so that their sum is equal to 1\n    this._keys.forEach((key) => {\n      key.weight /= totalWeight;\n    });\n  }\n  get(keyId) {\n    return this._keyMap[keyId]\n  }\n  keys() {\n    return this._keys\n  }\n  toJSON() {\n    return JSON.stringify(this._keys)\n  }\n}\n\nfunction createKey(key) {\n  let path = null;\n  let id = null;\n  let src = null;\n  let weight = 1;\n  let getFn = null;\n\n  if (isString(key) || isArray(key)) {\n    src = key;\n    path = createKeyPath(key);\n    id = createKeyId(key);\n  } else {\n    if (!hasOwn.call(key, 'name')) {\n      throw new Error(MISSING_KEY_PROPERTY('name'))\n    }\n\n    const name = key.name;\n    src = name;\n\n    if (hasOwn.call(key, 'weight')) {\n      weight = key.weight;\n\n      if (weight <= 0) {\n        throw new Error(INVALID_KEY_WEIGHT_VALUE(name))\n      }\n    }\n\n    path = createKeyPath(name);\n    id = createKeyId(name);\n    getFn = key.getFn;\n  }\n\n  return { path, id, weight, src, getFn }\n}\n\nfunction createKeyPath(key) {\n  return isArray(key) ? key : key.split('.')\n}\n\nfunction createKeyId(key) {\n  return isArray(key) ? key.join('.') : key\n}\n\nfunction get(obj, path) {\n  let list = [];\n  let arr = false;\n\n  const deepGet = (obj, path, index) => {\n    if (!isDefined(obj)) {\n      return\n    }\n    if (!path[index]) {\n      // If there's no path left, we've arrived at the object we care about.\n      list.push(obj);\n    } else {\n      let key = path[index];\n\n      const value = obj[key];\n\n      if (!isDefined(value)) {\n        return\n      }\n\n      // If we're at the last value in the path, and if it's a string/number/bool,\n      // add it to the list\n      if (\n        index === path.length - 1 &&\n        (isString(value) || isNumber(value) || isBoolean(value))\n      ) {\n        list.push(toString(value));\n      } else if (isArray(value)) {\n        arr = true;\n        // Search each item in the array.\n        for (let i = 0, len = value.length; i < len; i += 1) {\n          deepGet(value[i], path, index + 1);\n        }\n      } else if (path.length) {\n        // An object. Recurse further.\n        deepGet(value, path, index + 1);\n      }\n    }\n  };\n\n  // Backwards compatibility (since path used to be a string)\n  deepGet(obj, isString(path) ? path.split('.') : path, 0);\n\n  return arr ? list : list[0]\n}\n\nconst MatchOptions = {\n  // Whether the matches should be included in the result set. When `true`, each record in the result\n  // set will include the indices of the matched characters.\n  // These can consequently be used for highlighting purposes.\n  includeMatches: false,\n  // When `true`, the matching function will continue to the end of a search pattern even if\n  // a perfect match has already been located in the string.\n  findAllMatches: false,\n  // Minimum number of characters that must be matched before a result is considered a match\n  minMatchCharLength: 1\n};\n\nconst BasicOptions = {\n  // When `true`, the algorithm continues searching to the end of the input even if a perfect\n  // match is found before the end of the same input.\n  isCaseSensitive: false,\n  // When true, the matching function will continue to the end of a search pattern even if\n  includeScore: false,\n  // List of properties that will be searched. This also supports nested properties.\n  keys: [],\n  // Whether to sort the result list, by score\n  shouldSort: true,\n  // Default sort function: sort by ascending score, ascending index\n  sortFn: (a, b) =>\n    a.score === b.score ? (a.idx < b.idx ? -1 : 1) : a.score < b.score ? -1 : 1\n};\n\nconst FuzzyOptions = {\n  // Approximately where in the text is the pattern expected to be found?\n  location: 0,\n  // At what point does the match algorithm give up. A threshold of '0.0' requires a perfect match\n  // (of both letters and location), a threshold of '1.0' would match anything.\n  threshold: 0.6,\n  // Determines how close the match must be to the fuzzy location (specified above).\n  // An exact letter match which is 'distance' characters away from the fuzzy location\n  // would score as a complete mismatch. A distance of '0' requires the match be at\n  // the exact location specified, a threshold of '1000' would require a perfect match\n  // to be within 800 characters of the fuzzy location to be found using a 0.8 threshold.\n  distance: 100\n};\n\nconst AdvancedOptions = {\n  // When `true`, it enables the use of unix-like search commands\n  useExtendedSearch: false,\n  // The get function to use when fetching an object's properties.\n  // The default will search nested paths *ie foo.bar.baz*\n  getFn: get,\n  // When `true`, search will ignore `location` and `distance`, so it won't matter\n  // where in the string the pattern appears.\n  // More info: https://fusejs.io/concepts/scoring-theory.html#fuzziness-score\n  ignoreLocation: false,\n  // When `true`, the calculation for the relevance score (used for sorting) will\n  // ignore the field-length norm.\n  // More info: https://fusejs.io/concepts/scoring-theory.html#field-length-norm\n  ignoreFieldNorm: false,\n  // The weight to determine how much field length norm effects scoring.\n  fieldNormWeight: 1\n};\n\nvar Config = {\n  ...BasicOptions,\n  ...MatchOptions,\n  ...FuzzyOptions,\n  ...AdvancedOptions\n};\n\nconst SPACE = /[^ ]+/g;\n\n// Field-length norm: the shorter the field, the higher the weight.\n// Set to 3 decimals to reduce index size.\nfunction norm(weight = 1, mantissa = 3) {\n  const cache = new Map();\n  const m = Math.pow(10, mantissa);\n\n  return {\n    get(value) {\n      const numTokens = value.match(SPACE).length;\n\n      if (cache.has(numTokens)) {\n        return cache.get(numTokens)\n      }\n\n      // Default function is 1/sqrt(x), weight makes that variable\n      const norm = 1 / Math.pow(numTokens, 0.5 * weight);\n\n      // In place of `toFixed(mantissa)`, for faster computation\n      const n = parseFloat(Math.round(norm * m) / m);\n\n      cache.set(numTokens, n);\n\n      return n\n    },\n    clear() {\n      cache.clear();\n    }\n  }\n}\n\nclass FuseIndex {\n  constructor({\n    getFn = Config.getFn,\n    fieldNormWeight = Config.fieldNormWeight\n  } = {}) {\n    this.norm = norm(fieldNormWeight, 3);\n    this.getFn = getFn;\n    this.isCreated = false;\n\n    this.setIndexRecords();\n  }\n  setSources(docs = []) {\n    this.docs = docs;\n  }\n  setIndexRecords(records = []) {\n    this.records = records;\n  }\n  setKeys(keys = []) {\n    this.keys = keys;\n    this._keysMap = {};\n    keys.forEach((key, idx) => {\n      this._keysMap[key.id] = idx;\n    });\n  }\n  create() {\n    if (this.isCreated || !this.docs.length) {\n      return\n    }\n\n    this.isCreated = true;\n\n    // List is Array<String>\n    if (isString(this.docs[0])) {\n      this.docs.forEach((doc, docIndex) => {\n        this._addString(doc, docIndex);\n      });\n    } else {\n      // List is Array<Object>\n      this.docs.forEach((doc, docIndex) => {\n        this._addObject(doc, docIndex);\n      });\n    }\n\n    this.norm.clear();\n  }\n  // Adds a doc to the end of the index\n  add(doc) {\n    const idx = this.size();\n\n    if (isString(doc)) {\n      this._addString(doc, idx);\n    } else {\n      this._addObject(doc, idx);\n    }\n  }\n  // Removes the doc at the specified index of the index\n  removeAt(idx) {\n    this.records.splice(idx, 1);\n\n    // Change ref index of every subsquent doc\n    for (let i = idx, len = this.size(); i < len; i += 1) {\n      this.records[i].i -= 1;\n    }\n  }\n  getValueForItemAtKeyId(item, keyId) {\n    return item[this._keysMap[keyId]]\n  }\n  size() {\n    return this.records.length\n  }\n  _addString(doc, docIndex) {\n    if (!isDefined(doc) || isBlank(doc)) {\n      return\n    }\n\n    let record = {\n      v: doc,\n      i: docIndex,\n      n: this.norm.get(doc)\n    };\n\n    this.records.push(record);\n  }\n  _addObject(doc, docIndex) {\n    let record = { i: docIndex, $: {} };\n\n    // Iterate over every key (i.e, path), and fetch the value at that key\n    this.keys.forEach((key, keyIndex) => {\n      let value = key.getFn ? key.getFn(doc) : this.getFn(doc, key.path);\n\n      if (!isDefined(value)) {\n        return\n      }\n\n      if (isArray(value)) {\n        let subRecords = [];\n        const stack = [{ nestedArrIndex: -1, value }];\n\n        while (stack.length) {\n          const { nestedArrIndex, value } = stack.pop();\n\n          if (!isDefined(value)) {\n            continue\n          }\n\n          if (isString(value) && !isBlank(value)) {\n            let subRecord = {\n              v: value,\n              i: nestedArrIndex,\n              n: this.norm.get(value)\n            };\n\n            subRecords.push(subRecord);\n          } else if (isArray(value)) {\n            value.forEach((item, k) => {\n              stack.push({\n                nestedArrIndex: k,\n                value: item\n              });\n            });\n          } else ;\n        }\n        record.$[keyIndex] = subRecords;\n      } else if (isString(value) && !isBlank(value)) {\n        let subRecord = {\n          v: value,\n          n: this.norm.get(value)\n        };\n\n        record.$[keyIndex] = subRecord;\n      }\n    });\n\n    this.records.push(record);\n  }\n  toJSON() {\n    return {\n      keys: this.keys,\n      records: this.records\n    }\n  }\n}\n\nfunction createIndex(\n  keys,\n  docs,\n  { getFn = Config.getFn, fieldNormWeight = Config.fieldNormWeight } = {}\n) {\n  const myIndex = new FuseIndex({ getFn, fieldNormWeight });\n  myIndex.setKeys(keys.map(createKey));\n  myIndex.setSources(docs);\n  myIndex.create();\n  return myIndex\n}\n\nfunction parseIndex(\n  data,\n  { getFn = Config.getFn, fieldNormWeight = Config.fieldNormWeight } = {}\n) {\n  const { keys, records } = data;\n  const myIndex = new FuseIndex({ getFn, fieldNormWeight });\n  myIndex.setKeys(keys);\n  myIndex.setIndexRecords(records);\n  return myIndex\n}\n\nfunction computeScore$1(\n  pattern,\n  {\n    errors = 0,\n    currentLocation = 0,\n    expectedLocation = 0,\n    distance = Config.distance,\n    ignoreLocation = Config.ignoreLocation\n  } = {}\n) {\n  const accuracy = errors / pattern.length;\n\n  if (ignoreLocation) {\n    return accuracy\n  }\n\n  const proximity = Math.abs(expectedLocation - currentLocation);\n\n  if (!distance) {\n    // Dodge divide by zero error.\n    return proximity ? 1.0 : accuracy\n  }\n\n  return accuracy + proximity / distance\n}\n\nfunction convertMaskToIndices(\n  matchmask = [],\n  minMatchCharLength = Config.minMatchCharLength\n) {\n  let indices = [];\n  let start = -1;\n  let end = -1;\n  let i = 0;\n\n  for (let len = matchmask.length; i < len; i += 1) {\n    let match = matchmask[i];\n    if (match && start === -1) {\n      start = i;\n    } else if (!match && start !== -1) {\n      end = i - 1;\n      if (end - start + 1 >= minMatchCharLength) {\n        indices.push([start, end]);\n      }\n      start = -1;\n    }\n  }\n\n  // (i-1 - start) + 1 => i - start\n  if (matchmask[i - 1] && i - start >= minMatchCharLength) {\n    indices.push([start, i - 1]);\n  }\n\n  return indices\n}\n\n// Machine word size\nconst MAX_BITS = 32;\n\nfunction search(\n  text,\n  pattern,\n  patternAlphabet,\n  {\n    location = Config.location,\n    distance = Config.distance,\n    threshold = Config.threshold,\n    findAllMatches = Config.findAllMatches,\n    minMatchCharLength = Config.minMatchCharLength,\n    includeMatches = Config.includeMatches,\n    ignoreLocation = Config.ignoreLocation\n  } = {}\n) {\n  if (pattern.length > MAX_BITS) {\n    throw new Error(PATTERN_LENGTH_TOO_LARGE(MAX_BITS))\n  }\n\n  const patternLen = pattern.length;\n  // Set starting location at beginning text and initialize the alphabet.\n  const textLen = text.length;\n  // Handle the case when location > text.length\n  const expectedLocation = Math.max(0, Math.min(location, textLen));\n  // Highest score beyond which we give up.\n  let currentThreshold = threshold;\n  // Is there a nearby exact match? (speedup)\n  let bestLocation = expectedLocation;\n\n  // Performance: only computer matches when the minMatchCharLength > 1\n  // OR if `includeMatches` is true.\n  const computeMatches = minMatchCharLength > 1 || includeMatches;\n  // A mask of the matches, used for building the indices\n  const matchMask = computeMatches ? Array(textLen) : [];\n\n  let index;\n\n  // Get all exact matches, here for speed up\n  while ((index = text.indexOf(pattern, bestLocation)) > -1) {\n    let score = computeScore$1(pattern, {\n      currentLocation: index,\n      expectedLocation,\n      distance,\n      ignoreLocation\n    });\n\n    currentThreshold = Math.min(score, currentThreshold);\n    bestLocation = index + patternLen;\n\n    if (computeMatches) {\n      let i = 0;\n      while (i < patternLen) {\n        matchMask[index + i] = 1;\n        i += 1;\n      }\n    }\n  }\n\n  // Reset the best location\n  bestLocation = -1;\n\n  let lastBitArr = [];\n  let finalScore = 1;\n  let binMax = patternLen + textLen;\n\n  const mask = 1 << (patternLen - 1);\n\n  for (let i = 0; i < patternLen; i += 1) {\n    // Scan for the best match; each iteration allows for one more error.\n    // Run a binary search to determine how far from the match location we can stray\n    // at this error level.\n    let binMin = 0;\n    let binMid = binMax;\n\n    while (binMin < binMid) {\n      const score = computeScore$1(pattern, {\n        errors: i,\n        currentLocation: expectedLocation + binMid,\n        expectedLocation,\n        distance,\n        ignoreLocation\n      });\n\n      if (score <= currentThreshold) {\n        binMin = binMid;\n      } else {\n        binMax = binMid;\n      }\n\n      binMid = Math.floor((binMax - binMin) / 2 + binMin);\n    }\n\n    // Use the result from this iteration as the maximum for the next.\n    binMax = binMid;\n\n    let start = Math.max(1, expectedLocation - binMid + 1);\n    let finish = findAllMatches\n      ? textLen\n      : Math.min(expectedLocation + binMid, textLen) + patternLen;\n\n    // Initialize the bit array\n    let bitArr = Array(finish + 2);\n\n    bitArr[finish + 1] = (1 << i) - 1;\n\n    for (let j = finish; j >= start; j -= 1) {\n      let currentLocation = j - 1;\n      let charMatch = patternAlphabet[text.charAt(currentLocation)];\n\n      if (computeMatches) {\n        // Speed up: quick bool to int conversion (i.e, `charMatch ? 1 : 0`)\n        matchMask[currentLocation] = +!!charMatch;\n      }\n\n      // First pass: exact match\n      bitArr[j] = ((bitArr[j + 1] << 1) | 1) & charMatch;\n\n      // Subsequent passes: fuzzy match\n      if (i) {\n        bitArr[j] |=\n          ((lastBitArr[j + 1] | lastBitArr[j]) << 1) | 1 | lastBitArr[j + 1];\n      }\n\n      if (bitArr[j] & mask) {\n        finalScore = computeScore$1(pattern, {\n          errors: i,\n          currentLocation,\n          expectedLocation,\n          distance,\n          ignoreLocation\n        });\n\n        // This match will almost certainly be better than any existing match.\n        // But check anyway.\n        if (finalScore <= currentThreshold) {\n          // Indeed it is\n          currentThreshold = finalScore;\n          bestLocation = currentLocation;\n\n          // Already passed `loc`, downhill from here on in.\n          if (bestLocation <= expectedLocation) {\n            break\n          }\n\n          // When passing `bestLocation`, don't exceed our current distance from `expectedLocation`.\n          start = Math.max(1, 2 * expectedLocation - bestLocation);\n        }\n      }\n    }\n\n    // No hope for a (better) match at greater error levels.\n    const score = computeScore$1(pattern, {\n      errors: i + 1,\n      currentLocation: expectedLocation,\n      expectedLocation,\n      distance,\n      ignoreLocation\n    });\n\n    if (score > currentThreshold) {\n      break\n    }\n\n    lastBitArr = bitArr;\n  }\n\n  const result = {\n    isMatch: bestLocation >= 0,\n    // Count exact matches (those with a score of 0) to be \"almost\" exact\n    score: Math.max(0.001, finalScore)\n  };\n\n  if (computeMatches) {\n    const indices = convertMaskToIndices(matchMask, minMatchCharLength);\n    if (!indices.length) {\n      result.isMatch = false;\n    } else if (includeMatches) {\n      result.indices = indices;\n    }\n  }\n\n  return result\n}\n\nfunction createPatternAlphabet(pattern) {\n  let mask = {};\n\n  for (let i = 0, len = pattern.length; i < len; i += 1) {\n    const char = pattern.charAt(i);\n    mask[char] = (mask[char] || 0) | (1 << (len - i - 1));\n  }\n\n  return mask\n}\n\nclass BitapSearch {\n  constructor(\n    pattern,\n    {\n      location = Config.location,\n      threshold = Config.threshold,\n      distance = Config.distance,\n      includeMatches = Config.includeMatches,\n      findAllMatches = Config.findAllMatches,\n      minMatchCharLength = Config.minMatchCharLength,\n      isCaseSensitive = Config.isCaseSensitive,\n      ignoreLocation = Config.ignoreLocation\n    } = {}\n  ) {\n    this.options = {\n      location,\n      threshold,\n      distance,\n      includeMatches,\n      findAllMatches,\n      minMatchCharLength,\n      isCaseSensitive,\n      ignoreLocation\n    };\n\n    this.pattern = isCaseSensitive ? pattern : pattern.toLowerCase();\n\n    this.chunks = [];\n\n    if (!this.pattern.length) {\n      return\n    }\n\n    const addChunk = (pattern, startIndex) => {\n      this.chunks.push({\n        pattern,\n        alphabet: createPatternAlphabet(pattern),\n        startIndex\n      });\n    };\n\n    const len = this.pattern.length;\n\n    if (len > MAX_BITS) {\n      let i = 0;\n      const remainder = len % MAX_BITS;\n      const end = len - remainder;\n\n      while (i < end) {\n        addChunk(this.pattern.substr(i, MAX_BITS), i);\n        i += MAX_BITS;\n      }\n\n      if (remainder) {\n        const startIndex = len - MAX_BITS;\n        addChunk(this.pattern.substr(startIndex), startIndex);\n      }\n    } else {\n      addChunk(this.pattern, 0);\n    }\n  }\n\n  searchIn(text) {\n    const { isCaseSensitive, includeMatches } = this.options;\n\n    if (!isCaseSensitive) {\n      text = text.toLowerCase();\n    }\n\n    // Exact match\n    if (this.pattern === text) {\n      let result = {\n        isMatch: true,\n        score: 0\n      };\n\n      if (includeMatches) {\n        result.indices = [[0, text.length - 1]];\n      }\n\n      return result\n    }\n\n    // Otherwise, use Bitap algorithm\n    const {\n      location,\n      distance,\n      threshold,\n      findAllMatches,\n      minMatchCharLength,\n      ignoreLocation\n    } = this.options;\n\n    let allIndices = [];\n    let totalScore = 0;\n    let hasMatches = false;\n\n    this.chunks.forEach(({ pattern, alphabet, startIndex }) => {\n      const { isMatch, score, indices } = search(text, pattern, alphabet, {\n        location: location + startIndex,\n        distance,\n        threshold,\n        findAllMatches,\n        minMatchCharLength,\n        includeMatches,\n        ignoreLocation\n      });\n\n      if (isMatch) {\n        hasMatches = true;\n      }\n\n      totalScore += score;\n\n      if (isMatch && indices) {\n        allIndices = [...allIndices, ...indices];\n      }\n    });\n\n    let result = {\n      isMatch: hasMatches,\n      score: hasMatches ? totalScore / this.chunks.length : 1\n    };\n\n    if (hasMatches && includeMatches) {\n      result.indices = allIndices;\n    }\n\n    return result\n  }\n}\n\nclass BaseMatch {\n  constructor(pattern) {\n    this.pattern = pattern;\n  }\n  static isMultiMatch(pattern) {\n    return getMatch(pattern, this.multiRegex)\n  }\n  static isSingleMatch(pattern) {\n    return getMatch(pattern, this.singleRegex)\n  }\n  search(/*text*/) {}\n}\n\nfunction getMatch(pattern, exp) {\n  const matches = pattern.match(exp);\n  return matches ? matches[1] : null\n}\n\n// Token: 'file\n\nclass ExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'exact'\n  }\n  static get multiRegex() {\n    return /^=\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^=(.*)$/\n  }\n  search(text) {\n    const isMatch = text === this.pattern;\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, this.pattern.length - 1]\n    }\n  }\n}\n\n// Token: !fire\n\nclass InverseExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'inverse-exact'\n  }\n  static get multiRegex() {\n    return /^!\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^!(.*)$/\n  }\n  search(text) {\n    const index = text.indexOf(this.pattern);\n    const isMatch = index === -1;\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, text.length - 1]\n    }\n  }\n}\n\n// Token: ^file\n\nclass PrefixExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'prefix-exact'\n  }\n  static get multiRegex() {\n    return /^\\^\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^\\^(.*)$/\n  }\n  search(text) {\n    const isMatch = text.startsWith(this.pattern);\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, this.pattern.length - 1]\n    }\n  }\n}\n\n// Token: !^fire\n\nclass InversePrefixExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'inverse-prefix-exact'\n  }\n  static get multiRegex() {\n    return /^!\\^\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^!\\^(.*)$/\n  }\n  search(text) {\n    const isMatch = !text.startsWith(this.pattern);\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, text.length - 1]\n    }\n  }\n}\n\n// Token: .file$\n\nclass SuffixExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'suffix-exact'\n  }\n  static get multiRegex() {\n    return /^\"(.*)\"\\$$/\n  }\n  static get singleRegex() {\n    return /^(.*)\\$$/\n  }\n  search(text) {\n    const isMatch = text.endsWith(this.pattern);\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [text.length - this.pattern.length, text.length - 1]\n    }\n  }\n}\n\n// Token: !.file$\n\nclass InverseSuffixExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'inverse-suffix-exact'\n  }\n  static get multiRegex() {\n    return /^!\"(.*)\"\\$$/\n  }\n  static get singleRegex() {\n    return /^!(.*)\\$$/\n  }\n  search(text) {\n    const isMatch = !text.endsWith(this.pattern);\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, text.length - 1]\n    }\n  }\n}\n\nclass FuzzyMatch extends BaseMatch {\n  constructor(\n    pattern,\n    {\n      location = Config.location,\n      threshold = Config.threshold,\n      distance = Config.distance,\n      includeMatches = Config.includeMatches,\n      findAllMatches = Config.findAllMatches,\n      minMatchCharLength = Config.minMatchCharLength,\n      isCaseSensitive = Config.isCaseSensitive,\n      ignoreLocation = Config.ignoreLocation\n    } = {}\n  ) {\n    super(pattern);\n    this._bitapSearch = new BitapSearch(pattern, {\n      location,\n      threshold,\n      distance,\n      includeMatches,\n      findAllMatches,\n      minMatchCharLength,\n      isCaseSensitive,\n      ignoreLocation\n    });\n  }\n  static get type() {\n    return 'fuzzy'\n  }\n  static get multiRegex() {\n    return /^\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^(.*)$/\n  }\n  search(text) {\n    return this._bitapSearch.searchIn(text)\n  }\n}\n\n// Token: 'file\n\nclass IncludeMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'include'\n  }\n  static get multiRegex() {\n    return /^'\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^'(.*)$/\n  }\n  search(text) {\n    let location = 0;\n    let index;\n\n    const indices = [];\n    const patternLen = this.pattern.length;\n\n    // Get all exact matches\n    while ((index = text.indexOf(this.pattern, location)) > -1) {\n      location = index + patternLen;\n      indices.push([index, location - 1]);\n    }\n\n    const isMatch = !!indices.length;\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices\n    }\n  }\n}\n\n// ❗Order is important. DO NOT CHANGE.\nconst searchers = [\n  ExactMatch,\n  IncludeMatch,\n  PrefixExactMatch,\n  InversePrefixExactMatch,\n  InverseSuffixExactMatch,\n  SuffixExactMatch,\n  InverseExactMatch,\n  FuzzyMatch\n];\n\nconst searchersLen = searchers.length;\n\n// Regex to split by spaces, but keep anything in quotes together\nconst SPACE_RE = / +(?=(?:[^\\\"]*\\\"[^\\\"]*\\\")*[^\\\"]*$)/;\nconst OR_TOKEN = '|';\n\n// Return a 2D array representation of the query, for simpler parsing.\n// Example:\n// \"^core go$ | rb$ | py$ xy$\" => [[\"^core\", \"go$\"], [\"rb$\"], [\"py$\", \"xy$\"]]\nfunction parseQuery(pattern, options = {}) {\n  return pattern.split(OR_TOKEN).map((item) => {\n    let query = item\n      .trim()\n      .split(SPACE_RE)\n      .filter((item) => item && !!item.trim());\n\n    let results = [];\n    for (let i = 0, len = query.length; i < len; i += 1) {\n      const queryItem = query[i];\n\n      // 1. Handle multiple query match (i.e, once that are quoted, like `\"hello world\"`)\n      let found = false;\n      let idx = -1;\n      while (!found && ++idx < searchersLen) {\n        const searcher = searchers[idx];\n        let token = searcher.isMultiMatch(queryItem);\n        if (token) {\n          results.push(new searcher(token, options));\n          found = true;\n        }\n      }\n\n      if (found) {\n        continue\n      }\n\n      // 2. Handle single query matches (i.e, once that are *not* quoted)\n      idx = -1;\n      while (++idx < searchersLen) {\n        const searcher = searchers[idx];\n        let token = searcher.isSingleMatch(queryItem);\n        if (token) {\n          results.push(new searcher(token, options));\n          break\n        }\n      }\n    }\n\n    return results\n  })\n}\n\n// These extended matchers can return an array of matches, as opposed\n// to a singl match\nconst MultiMatchSet = new Set([FuzzyMatch.type, IncludeMatch.type]);\n\n/**\n * Command-like searching\n * ======================\n *\n * Given multiple search terms delimited by spaces.e.g. `^jscript .python$ ruby !java`,\n * search in a given text.\n *\n * Search syntax:\n *\n * | Token       | Match type                 | Description                            |\n * | ----------- | -------------------------- | -------------------------------------- |\n * | `jscript`   | fuzzy-match                | Items that fuzzy match `jscript`       |\n * | `=scheme`   | exact-match                | Items that are `scheme`                |\n * | `'python`   | include-match              | Items that include `python`            |\n * | `!ruby`     | inverse-exact-match        | Items that do not include `ruby`       |\n * | `^java`     | prefix-exact-match         | Items that start with `java`           |\n * | `!^earlang` | inverse-prefix-exact-match | Items that do not start with `earlang` |\n * | `.js$`      | suffix-exact-match         | Items that end with `.js`              |\n * | `!.go$`     | inverse-suffix-exact-match | Items that do not end with `.go`       |\n *\n * A single pipe character acts as an OR operator. For example, the following\n * query matches entries that start with `core` and end with either`go`, `rb`,\n * or`py`.\n *\n * ```\n * ^core go$ | rb$ | py$\n * ```\n */\nclass ExtendedSearch {\n  constructor(\n    pattern,\n    {\n      isCaseSensitive = Config.isCaseSensitive,\n      includeMatches = Config.includeMatches,\n      minMatchCharLength = Config.minMatchCharLength,\n      ignoreLocation = Config.ignoreLocation,\n      findAllMatches = Config.findAllMatches,\n      location = Config.location,\n      threshold = Config.threshold,\n      distance = Config.distance\n    } = {}\n  ) {\n    this.query = null;\n    this.options = {\n      isCaseSensitive,\n      includeMatches,\n      minMatchCharLength,\n      findAllMatches,\n      ignoreLocation,\n      location,\n      threshold,\n      distance\n    };\n\n    this.pattern = isCaseSensitive ? pattern : pattern.toLowerCase();\n    this.query = parseQuery(this.pattern, this.options);\n  }\n\n  static condition(_, options) {\n    return options.useExtendedSearch\n  }\n\n  searchIn(text) {\n    const query = this.query;\n\n    if (!query) {\n      return {\n        isMatch: false,\n        score: 1\n      }\n    }\n\n    const { includeMatches, isCaseSensitive } = this.options;\n\n    text = isCaseSensitive ? text : text.toLowerCase();\n\n    let numMatches = 0;\n    let allIndices = [];\n    let totalScore = 0;\n\n    // ORs\n    for (let i = 0, qLen = query.length; i < qLen; i += 1) {\n      const searchers = query[i];\n\n      // Reset indices\n      allIndices.length = 0;\n      numMatches = 0;\n\n      // ANDs\n      for (let j = 0, pLen = searchers.length; j < pLen; j += 1) {\n        const searcher = searchers[j];\n        const { isMatch, indices, score } = searcher.search(text);\n\n        if (isMatch) {\n          numMatches += 1;\n          totalScore += score;\n          if (includeMatches) {\n            const type = searcher.constructor.type;\n            if (MultiMatchSet.has(type)) {\n              allIndices = [...allIndices, ...indices];\n            } else {\n              allIndices.push(indices);\n            }\n          }\n        } else {\n          totalScore = 0;\n          numMatches = 0;\n          allIndices.length = 0;\n          break\n        }\n      }\n\n      // OR condition, so if TRUE, return\n      if (numMatches) {\n        let result = {\n          isMatch: true,\n          score: totalScore / numMatches\n        };\n\n        if (includeMatches) {\n          result.indices = allIndices;\n        }\n\n        return result\n      }\n    }\n\n    // Nothing was matched\n    return {\n      isMatch: false,\n      score: 1\n    }\n  }\n}\n\nconst registeredSearchers = [];\n\nfunction register(...args) {\n  registeredSearchers.push(...args);\n}\n\nfunction createSearcher(pattern, options) {\n  for (let i = 0, len = registeredSearchers.length; i < len; i += 1) {\n    let searcherClass = registeredSearchers[i];\n    if (searcherClass.condition(pattern, options)) {\n      return new searcherClass(pattern, options)\n    }\n  }\n\n  return new BitapSearch(pattern, options)\n}\n\nconst LogicalOperator = {\n  AND: '$and',\n  OR: '$or'\n};\n\nconst KeyType = {\n  PATH: '$path',\n  PATTERN: '$val'\n};\n\nconst isExpression = (query) =>\n  !!(query[LogicalOperator.AND] || query[LogicalOperator.OR]);\n\nconst isPath = (query) => !!query[KeyType.PATH];\n\nconst isLeaf = (query) =>\n  !isArray(query) && isObject(query) && !isExpression(query);\n\nconst convertToExplicit = (query) => ({\n  [LogicalOperator.AND]: Object.keys(query).map((key) => ({\n    [key]: query[key]\n  }))\n});\n\n// When `auto` is `true`, the parse function will infer and initialize and add\n// the appropriate `Searcher` instance\nfunction parse(query, options, { auto = true } = {}) {\n  const next = (query) => {\n    let keys = Object.keys(query);\n\n    const isQueryPath = isPath(query);\n\n    if (!isQueryPath && keys.length > 1 && !isExpression(query)) {\n      return next(convertToExplicit(query))\n    }\n\n    if (isLeaf(query)) {\n      const key = isQueryPath ? query[KeyType.PATH] : keys[0];\n\n      const pattern = isQueryPath ? query[KeyType.PATTERN] : query[key];\n\n      if (!isString(pattern)) {\n        throw new Error(LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY(key))\n      }\n\n      const obj = {\n        keyId: createKeyId(key),\n        pattern\n      };\n\n      if (auto) {\n        obj.searcher = createSearcher(pattern, options);\n      }\n\n      return obj\n    }\n\n    let node = {\n      children: [],\n      operator: keys[0]\n    };\n\n    keys.forEach((key) => {\n      const value = query[key];\n\n      if (isArray(value)) {\n        value.forEach((item) => {\n          node.children.push(next(item));\n        });\n      }\n    });\n\n    return node\n  };\n\n  if (!isExpression(query)) {\n    query = convertToExplicit(query);\n  }\n\n  return next(query)\n}\n\n// Practical scoring function\nfunction computeScore(\n  results,\n  { ignoreFieldNorm = Config.ignoreFieldNorm }\n) {\n  results.forEach((result) => {\n    let totalScore = 1;\n\n    result.matches.forEach(({ key, norm, score }) => {\n      const weight = key ? key.weight : null;\n\n      totalScore *= Math.pow(\n        score === 0 && weight ? Number.EPSILON : score,\n        (weight || 1) * (ignoreFieldNorm ? 1 : norm)\n      );\n    });\n\n    result.score = totalScore;\n  });\n}\n\nfunction transformMatches(result, data) {\n  const matches = result.matches;\n  data.matches = [];\n\n  if (!isDefined(matches)) {\n    return\n  }\n\n  matches.forEach((match) => {\n    if (!isDefined(match.indices) || !match.indices.length) {\n      return\n    }\n\n    const { indices, value } = match;\n\n    let obj = {\n      indices,\n      value\n    };\n\n    if (match.key) {\n      obj.key = match.key.src;\n    }\n\n    if (match.idx > -1) {\n      obj.refIndex = match.idx;\n    }\n\n    data.matches.push(obj);\n  });\n}\n\nfunction transformScore(result, data) {\n  data.score = result.score;\n}\n\nfunction format(\n  results,\n  docs,\n  {\n    includeMatches = Config.includeMatches,\n    includeScore = Config.includeScore\n  } = {}\n) {\n  const transformers = [];\n\n  if (includeMatches) transformers.push(transformMatches);\n  if (includeScore) transformers.push(transformScore);\n\n  return results.map((result) => {\n    const { idx } = result;\n\n    const data = {\n      item: docs[idx],\n      refIndex: idx\n    };\n\n    if (transformers.length) {\n      transformers.forEach((transformer) => {\n        transformer(result, data);\n      });\n    }\n\n    return data\n  })\n}\n\nclass Fuse {\n  constructor(docs, options = {}, index) {\n    this.options = { ...Config, ...options };\n\n    if (\n      this.options.useExtendedSearch &&\n      !true\n    ) {\n      throw new Error(EXTENDED_SEARCH_UNAVAILABLE)\n    }\n\n    this._keyStore = new KeyStore(this.options.keys);\n\n    this.setCollection(docs, index);\n  }\n\n  setCollection(docs, index) {\n    this._docs = docs;\n\n    if (index && !(index instanceof FuseIndex)) {\n      throw new Error(INCORRECT_INDEX_TYPE)\n    }\n\n    this._myIndex =\n      index ||\n      createIndex(this.options.keys, this._docs, {\n        getFn: this.options.getFn,\n        fieldNormWeight: this.options.fieldNormWeight\n      });\n  }\n\n  add(doc) {\n    if (!isDefined(doc)) {\n      return\n    }\n\n    this._docs.push(doc);\n    this._myIndex.add(doc);\n  }\n\n  remove(predicate = (/* doc, idx */) => false) {\n    const results = [];\n\n    for (let i = 0, len = this._docs.length; i < len; i += 1) {\n      const doc = this._docs[i];\n      if (predicate(doc, i)) {\n        this.removeAt(i);\n        i -= 1;\n        len -= 1;\n\n        results.push(doc);\n      }\n    }\n\n    return results\n  }\n\n  removeAt(idx) {\n    this._docs.splice(idx, 1);\n    this._myIndex.removeAt(idx);\n  }\n\n  getIndex() {\n    return this._myIndex\n  }\n\n  search(query, { limit = -1 } = {}) {\n    const {\n      includeMatches,\n      includeScore,\n      shouldSort,\n      sortFn,\n      ignoreFieldNorm\n    } = this.options;\n\n    let results = isString(query)\n      ? isString(this._docs[0])\n        ? this._searchStringList(query)\n        : this._searchObjectList(query)\n      : this._searchLogical(query);\n\n    computeScore(results, { ignoreFieldNorm });\n\n    if (shouldSort) {\n      results.sort(sortFn);\n    }\n\n    if (isNumber(limit) && limit > -1) {\n      results = results.slice(0, limit);\n    }\n\n    return format(results, this._docs, {\n      includeMatches,\n      includeScore\n    })\n  }\n\n  _searchStringList(query) {\n    const searcher = createSearcher(query, this.options);\n    const { records } = this._myIndex;\n    const results = [];\n\n    // Iterate over every string in the index\n    records.forEach(({ v: text, i: idx, n: norm }) => {\n      if (!isDefined(text)) {\n        return\n      }\n\n      const { isMatch, score, indices } = searcher.searchIn(text);\n\n      if (isMatch) {\n        results.push({\n          item: text,\n          idx,\n          matches: [{ score, value: text, norm, indices }]\n        });\n      }\n    });\n\n    return results\n  }\n\n  _searchLogical(query) {\n\n    const expression = parse(query, this.options);\n\n    const evaluate = (node, item, idx) => {\n      if (!node.children) {\n        const { keyId, searcher } = node;\n\n        const matches = this._findMatches({\n          key: this._keyStore.get(keyId),\n          value: this._myIndex.getValueForItemAtKeyId(item, keyId),\n          searcher\n        });\n\n        if (matches && matches.length) {\n          return [\n            {\n              idx,\n              item,\n              matches\n            }\n          ]\n        }\n\n        return []\n      }\n\n      const res = [];\n      for (let i = 0, len = node.children.length; i < len; i += 1) {\n        const child = node.children[i];\n        const result = evaluate(child, item, idx);\n        if (result.length) {\n          res.push(...result);\n        } else if (node.operator === LogicalOperator.AND) {\n          return []\n        }\n      }\n      return res\n    };\n\n    const records = this._myIndex.records;\n    const resultMap = {};\n    const results = [];\n\n    records.forEach(({ $: item, i: idx }) => {\n      if (isDefined(item)) {\n        let expResults = evaluate(expression, item, idx);\n\n        if (expResults.length) {\n          // Dedupe when adding\n          if (!resultMap[idx]) {\n            resultMap[idx] = { idx, item, matches: [] };\n            results.push(resultMap[idx]);\n          }\n          expResults.forEach(({ matches }) => {\n            resultMap[idx].matches.push(...matches);\n          });\n        }\n      }\n    });\n\n    return results\n  }\n\n  _searchObjectList(query) {\n    const searcher = createSearcher(query, this.options);\n    const { keys, records } = this._myIndex;\n    const results = [];\n\n    // List is Array<Object>\n    records.forEach(({ $: item, i: idx }) => {\n      if (!isDefined(item)) {\n        return\n      }\n\n      let matches = [];\n\n      // Iterate over every key (i.e, path), and fetch the value at that key\n      keys.forEach((key, keyIndex) => {\n        matches.push(\n          ...this._findMatches({\n            key,\n            value: item[keyIndex],\n            searcher\n          })\n        );\n      });\n\n      if (matches.length) {\n        results.push({\n          idx,\n          item,\n          matches\n        });\n      }\n    });\n\n    return results\n  }\n  _findMatches({ key, value, searcher }) {\n    if (!isDefined(value)) {\n      return []\n    }\n\n    let matches = [];\n\n    if (isArray(value)) {\n      value.forEach(({ v: text, i: idx, n: norm }) => {\n        if (!isDefined(text)) {\n          return\n        }\n\n        const { isMatch, score, indices } = searcher.searchIn(text);\n\n        if (isMatch) {\n          matches.push({\n            score,\n            key,\n            value: text,\n            idx,\n            norm,\n            indices\n          });\n        }\n      });\n    } else {\n      const { v: text, n: norm } = value;\n\n      const { isMatch, score, indices } = searcher.searchIn(text);\n\n      if (isMatch) {\n        matches.push({ score, key, value: text, norm, indices });\n      }\n    }\n\n    return matches\n  }\n}\n\nFuse.version = '6.6.2';\nFuse.createIndex = createIndex;\nFuse.parseIndex = parseIndex;\nFuse.config = Config;\n\n{\n  Fuse.parseQuery = parse;\n}\n\n{\n  register(ExtendedSearch);\n}\n\nexport { Fuse as default };\n"],"mappings":";;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,OAAT,CAAiBC,KAAjB,EAAwB;EACtB,OAAO,CAACC,KAAK,CAACF,OAAP,GACHG,MAAM,CAACF,KAAD,CAAN,KAAkB,gBADf,GAEHC,KAAK,CAACF,OAAN,CAAcC,KAAd,CAFJ;AAGD,C,CAED;;;AACA,IAAMG,QAAQ,GAAG,IAAI,CAArB;;AACA,SAASC,YAAT,CAAsBJ,KAAtB,EAA6B;EAC3B;EACA,IAAI,OAAOA,KAAP,IAAgB,QAApB,EAA8B;IAC5B,OAAOA,KAAP;EACD;;EACD,IAAIK,MAAM,GAAGL,KAAK,GAAG,EAArB;EACA,OAAOK,MAAM,IAAI,GAAV,IAAiB,IAAIL,KAAJ,IAAa,CAACG,QAA/B,GAA0C,IAA1C,GAAiDE,MAAxD;AACD;;AAED,SAASC,QAAT,CAAkBN,KAAlB,EAAyB;EACvB,OAAOA,KAAK,IAAI,IAAT,GAAgB,EAAhB,GAAqBI,YAAY,CAACJ,KAAD,CAAxC;AACD;;AAED,SAASO,QAAT,CAAkBP,KAAlB,EAAyB;EACvB,OAAO,OAAOA,KAAP,KAAiB,QAAxB;AACD;;AAED,SAASQ,QAAT,CAAkBR,KAAlB,EAAyB;EACvB,OAAO,OAAOA,KAAP,KAAiB,QAAxB;AACD,C,CAED;;;AACA,SAASS,SAAT,CAAmBT,KAAnB,EAA0B;EACxB,OACEA,KAAK,KAAK,IAAV,IACAA,KAAK,KAAK,KADV,IAECU,YAAY,CAACV,KAAD,CAAZ,IAAuBE,MAAM,CAACF,KAAD,CAAN,IAAiB,kBAH3C;AAKD;;AAED,SAASW,QAAT,CAAkBX,KAAlB,EAAyB;EACvB,OAAO,OAAOA,KAAP,KAAiB,QAAxB;AACD,C,CAED;;;AACA,SAASU,YAAT,CAAsBV,KAAtB,EAA6B;EAC3B,OAAOW,QAAQ,CAACX,KAAD,CAAR,IAAmBA,KAAK,KAAK,IAApC;AACD;;AAED,SAASY,SAAT,CAAmBZ,KAAnB,EAA0B;EACxB,OAAOA,KAAK,KAAKa,SAAV,IAAuBb,KAAK,KAAK,IAAxC;AACD;;AAED,SAASc,OAAT,CAAiBd,KAAjB,EAAwB;EACtB,OAAO,CAACA,KAAK,CAACe,IAAN,GAAaC,MAArB;AACD,C,CAED;AACA;;;AACA,SAASd,MAAT,CAAgBF,KAAhB,EAAuB;EACrB,OAAOA,KAAK,IAAI,IAAT,GACHA,KAAK,KAAKa,SAAV,GACE,oBADF,GAEE,eAHC,GAIHI,MAAM,CAACC,SAAP,CAAiBZ,QAAjB,CAA0Ba,IAA1B,CAA+BnB,KAA/B,CAJJ;AAKD;;AAED,IAAMoB,2BAA2B,GAAG,kCAApC;AAEA,IAAMC,oBAAoB,GAAG,wBAA7B;;AAEA,IAAMC,oCAAoC,GAAG,SAAvCA,oCAAuC,CAACC,GAAD;EAAA,uCAClBA,GADkB;AAAA,CAA7C;;AAGA,IAAMC,wBAAwB,GAAG,SAA3BA,wBAA2B,CAACC,GAAD;EAAA,+CACEA,GADF;AAAA,CAAjC;;AAGA,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACC,IAAD;EAAA,yBAAqBA,IAArB;AAAA,CAA7B;;AAEA,IAAMC,wBAAwB,GAAG,SAA3BA,wBAA2B,CAACL,GAAD;EAAA,2CACFA,GADE;AAAA,CAAjC;;AAGA,IAAMM,MAAM,GAAGZ,MAAM,CAACC,SAAP,CAAiBY,cAAhC;;IAEMC,Q;EACJ,kBAAYC,IAAZ,EAAkB;IAAA;;IAAA;;IAChB,KAAKC,KAAL,GAAa,EAAb;IACA,KAAKC,OAAL,GAAe,EAAf;IAEA,IAAIC,WAAW,GAAG,CAAlB;IAEAH,IAAI,CAACI,OAAL,CAAa,UAACb,GAAD,EAAS;MACpB,IAAIc,GAAG,GAAGC,SAAS,CAACf,GAAD,CAAnB;MAEAY,WAAW,IAAIE,GAAG,CAACE,MAAnB;;MAEA,KAAI,CAACN,KAAL,CAAWO,IAAX,CAAgBH,GAAhB;;MACA,KAAI,CAACH,OAAL,CAAaG,GAAG,CAACI,EAAjB,IAAuBJ,GAAvB;MAEAF,WAAW,IAAIE,GAAG,CAACE,MAAnB;IACD,CATD,EANgB,CAiBhB;;IACA,KAAKN,KAAL,CAAWG,OAAX,CAAmB,UAACb,GAAD,EAAS;MAC1BA,GAAG,CAACgB,MAAJ,IAAcJ,WAAd;IACD,CAFD;EAGD;;;;WACD,aAAIO,KAAJ,EAAW;MACT,OAAO,KAAKR,OAAL,CAAaQ,KAAb,CAAP;IACD;;;WACD,gBAAO;MACL,OAAO,KAAKT,KAAZ;IACD;;;WACD,kBAAS;MACP,OAAOU,IAAI,CAACC,SAAL,CAAe,KAAKX,KAApB,CAAP;IACD;;;;;;AAGH,SAASK,SAAT,CAAmBf,GAAnB,EAAwB;EACtB,IAAIsB,IAAI,GAAG,IAAX;EACA,IAAIJ,EAAE,GAAG,IAAT;EACA,IAAIK,GAAG,GAAG,IAAV;EACA,IAAIP,MAAM,GAAG,CAAb;EACA,IAAIQ,KAAK,GAAG,IAAZ;;EAEA,IAAIxC,QAAQ,CAACgB,GAAD,CAAR,IAAiBxB,OAAO,CAACwB,GAAD,CAA5B,EAAmC;IACjCuB,GAAG,GAAGvB,GAAN;IACAsB,IAAI,GAAGG,aAAa,CAACzB,GAAD,CAApB;IACAkB,EAAE,GAAGQ,WAAW,CAAC1B,GAAD,CAAhB;EACD,CAJD,MAIO;IACL,IAAI,CAACM,MAAM,CAACV,IAAP,CAAYI,GAAZ,EAAiB,MAAjB,CAAL,EAA+B;MAC7B,MAAM,IAAI2B,KAAJ,CAAUxB,oBAAoB,CAAC,MAAD,CAA9B,CAAN;IACD;;IAED,IAAMC,IAAI,GAAGJ,GAAG,CAACI,IAAjB;IACAmB,GAAG,GAAGnB,IAAN;;IAEA,IAAIE,MAAM,CAACV,IAAP,CAAYI,GAAZ,EAAiB,QAAjB,CAAJ,EAAgC;MAC9BgB,MAAM,GAAGhB,GAAG,CAACgB,MAAb;;MAEA,IAAIA,MAAM,IAAI,CAAd,EAAiB;QACf,MAAM,IAAIW,KAAJ,CAAUtB,wBAAwB,CAACD,IAAD,CAAlC,CAAN;MACD;IACF;;IAEDkB,IAAI,GAAGG,aAAa,CAACrB,IAAD,CAApB;IACAc,EAAE,GAAGQ,WAAW,CAACtB,IAAD,CAAhB;IACAoB,KAAK,GAAGxB,GAAG,CAACwB,KAAZ;EACD;;EAED,OAAO;IAAEF,IAAI,EAAJA,IAAF;IAAQJ,EAAE,EAAFA,EAAR;IAAYF,MAAM,EAANA,MAAZ;IAAoBO,GAAG,EAAHA,GAApB;IAAyBC,KAAK,EAALA;EAAzB,CAAP;AACD;;AAED,SAASC,aAAT,CAAuBzB,GAAvB,EAA4B;EAC1B,OAAOxB,OAAO,CAACwB,GAAD,CAAP,GAAeA,GAAf,GAAqBA,GAAG,CAAC4B,KAAJ,CAAU,GAAV,CAA5B;AACD;;AAED,SAASF,WAAT,CAAqB1B,GAArB,EAA0B;EACxB,OAAOxB,OAAO,CAACwB,GAAD,CAAP,GAAeA,GAAG,CAAC6B,IAAJ,CAAS,GAAT,CAAf,GAA+B7B,GAAtC;AACD;;AAED,SAAS8B,GAAT,CAAahB,GAAb,EAAkBQ,IAAlB,EAAwB;EACtB,IAAIS,IAAI,GAAG,EAAX;EACA,IAAIC,GAAG,GAAG,KAAV;;EAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACnB,GAAD,EAAMQ,IAAN,EAAYY,KAAZ,EAAsB;IACpC,IAAI,CAAC7C,SAAS,CAACyB,GAAD,CAAd,EAAqB;MACnB;IACD;;IACD,IAAI,CAACQ,IAAI,CAACY,KAAD,CAAT,EAAkB;MAChB;MACAH,IAAI,CAACd,IAAL,CAAUH,GAAV;IACD,CAHD,MAGO;MACL,IAAId,GAAG,GAAGsB,IAAI,CAACY,KAAD,CAAd;MAEA,IAAMzD,KAAK,GAAGqC,GAAG,CAACd,GAAD,CAAjB;;MAEA,IAAI,CAACX,SAAS,CAACZ,KAAD,CAAd,EAAuB;QACrB;MACD,CAPI,CASL;MACA;;;MACA,IACEyD,KAAK,KAAKZ,IAAI,CAAC7B,MAAL,GAAc,CAAxB,KACCT,QAAQ,CAACP,KAAD,CAAR,IAAmBQ,QAAQ,CAACR,KAAD,CAA3B,IAAsCS,SAAS,CAACT,KAAD,CADhD,CADF,EAGE;QACAsD,IAAI,CAACd,IAAL,CAAUlC,QAAQ,CAACN,KAAD,CAAlB;MACD,CALD,MAKO,IAAID,OAAO,CAACC,KAAD,CAAX,EAAoB;QACzBuD,GAAG,GAAG,IAAN,CADyB,CAEzB;;QACA,KAAK,IAAIG,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAG3D,KAAK,CAACgB,MAA5B,EAAoC0C,CAAC,GAAGC,GAAxC,EAA6CD,CAAC,IAAI,CAAlD,EAAqD;UACnDF,OAAO,CAACxD,KAAK,CAAC0D,CAAD,CAAN,EAAWb,IAAX,EAAiBY,KAAK,GAAG,CAAzB,CAAP;QACD;MACF,CANM,MAMA,IAAIZ,IAAI,CAAC7B,MAAT,EAAiB;QACtB;QACAwC,OAAO,CAACxD,KAAD,EAAQ6C,IAAR,EAAcY,KAAK,GAAG,CAAtB,CAAP;MACD;IACF;EACF,CAlCD,CAJsB,CAwCtB;;;EACAD,OAAO,CAACnB,GAAD,EAAM9B,QAAQ,CAACsC,IAAD,CAAR,GAAiBA,IAAI,CAACM,KAAL,CAAW,GAAX,CAAjB,GAAmCN,IAAzC,EAA+C,CAA/C,CAAP;EAEA,OAAOU,GAAG,GAAGD,IAAH,GAAUA,IAAI,CAAC,CAAD,CAAxB;AACD;;AAED,IAAMM,YAAY,GAAG;EACnB;EACA;EACA;EACAC,cAAc,EAAE,KAJG;EAKnB;EACA;EACAC,cAAc,EAAE,KAPG;EAQnB;EACAC,kBAAkB,EAAE;AATD,CAArB;AAYA,IAAMC,YAAY,GAAG;EACnB;EACA;EACAC,eAAe,EAAE,KAHE;EAInB;EACAC,YAAY,EAAE,KALK;EAMnB;EACAlC,IAAI,EAAE,EAPa;EAQnB;EACAmC,UAAU,EAAE,IATO;EAUnB;EACAC,MAAM,EAAE,gBAACC,CAAD,EAAIC,CAAJ;IAAA,OACND,CAAC,CAACE,KAAF,KAAYD,CAAC,CAACC,KAAd,GAAuBF,CAAC,CAACG,GAAF,GAAQF,CAAC,CAACE,GAAV,GAAgB,CAAC,CAAjB,GAAqB,CAA5C,GAAiDH,CAAC,CAACE,KAAF,GAAUD,CAAC,CAACC,KAAZ,GAAoB,CAAC,CAArB,GAAyB,CADpE;EAAA;AAXW,CAArB;AAeA,IAAME,YAAY,GAAG;EACnB;EACAC,QAAQ,EAAE,CAFS;EAGnB;EACA;EACAC,SAAS,EAAE,GALQ;EAMnB;EACA;EACA;EACA;EACA;EACAC,QAAQ,EAAE;AAXS,CAArB;AAcA,IAAMC,eAAe,GAAG;EACtB;EACAC,iBAAiB,EAAE,KAFG;EAGtB;EACA;EACA/B,KAAK,EAAEM,GALe;EAMtB;EACA;EACA;EACA0B,cAAc,EAAE,KATM;EAUtB;EACA;EACA;EACAC,eAAe,EAAE,KAbK;EActB;EACAC,eAAe,EAAE;AAfK,CAAxB;;AAkBA,IAAIC,MAAM,+DACLlB,YADK,GAELJ,YAFK,GAGLa,YAHK,GAILI,eAJK,CAAV;;AAOA,IAAMM,KAAK,GAAG,QAAd,C,CAEA;AACA;;AACA,SAASC,IAAT,GAAwC;EAAA,IAA1B7C,MAA0B,uEAAjB,CAAiB;EAAA,IAAd8C,QAAc,uEAAH,CAAG;EACtC,IAAMC,KAAK,GAAG,IAAIC,GAAJ,EAAd;EACA,IAAMC,CAAC,GAAGC,IAAI,CAACC,GAAL,CAAS,EAAT,EAAaL,QAAb,CAAV;EAEA,OAAO;IACLhC,GADK,eACDrD,KADC,EACM;MACT,IAAM2F,SAAS,GAAG3F,KAAK,CAAC4F,KAAN,CAAYT,KAAZ,EAAmBnE,MAArC;;MAEA,IAAIsE,KAAK,CAACO,GAAN,CAAUF,SAAV,CAAJ,EAA0B;QACxB,OAAOL,KAAK,CAACjC,GAAN,CAAUsC,SAAV,CAAP;MACD,CALQ,CAOT;;;MACA,IAAMP,IAAI,GAAG,IAAIK,IAAI,CAACC,GAAL,CAASC,SAAT,EAAoB,MAAMpD,MAA1B,CAAjB,CARS,CAUT;;MACA,IAAMuD,CAAC,GAAGC,UAAU,CAACN,IAAI,CAACO,KAAL,CAAWZ,IAAI,GAAGI,CAAlB,IAAuBA,CAAxB,CAApB;MAEAF,KAAK,CAACW,GAAN,CAAUN,SAAV,EAAqBG,CAArB;MAEA,OAAOA,CAAP;IACD,CAjBI;IAkBLI,KAlBK,mBAkBG;MACNZ,KAAK,CAACY,KAAN;IACD;EApBI,CAAP;AAsBD;;IAEKC,S;EACJ,qBAGQ;IAAA,+EAAJ,EAAI;IAAA,sBAFNpD,KAEM;IAAA,IAFNA,KAEM,2BAFEmC,MAAM,CAACnC,KAET;IAAA,gCADNkC,eACM;IAAA,IADNA,eACM,qCADYC,MAAM,CAACD,eACnB;;IAAA;;IACN,KAAKG,IAAL,GAAYA,IAAI,CAACH,eAAD,EAAkB,CAAlB,CAAhB;IACA,KAAKlC,KAAL,GAAaA,KAAb;IACA,KAAKqD,SAAL,GAAiB,KAAjB;IAEA,KAAKC,eAAL;EACD;;;;WACD,sBAAsB;MAAA,IAAXC,IAAW,uEAAJ,EAAI;MACpB,KAAKA,IAAL,GAAYA,IAAZ;IACD;;;WACD,2BAA8B;MAAA,IAAdC,OAAc,uEAAJ,EAAI;MAC5B,KAAKA,OAAL,GAAeA,OAAf;IACD;;;WACD,mBAAmB;MAAA;;MAAA,IAAXvE,IAAW,uEAAJ,EAAI;MACjB,KAAKA,IAAL,GAAYA,IAAZ;MACA,KAAKwE,QAAL,GAAgB,EAAhB;MACAxE,IAAI,CAACI,OAAL,CAAa,UAACb,GAAD,EAAMiD,GAAN,EAAc;QACzB,MAAI,CAACgC,QAAL,CAAcjF,GAAG,CAACkB,EAAlB,IAAwB+B,GAAxB;MACD,CAFD;IAGD;;;WACD,kBAAS;MAAA;;MACP,IAAI,KAAK4B,SAAL,IAAkB,CAAC,KAAKE,IAAL,CAAUtF,MAAjC,EAAyC;QACvC;MACD;;MAED,KAAKoF,SAAL,GAAiB,IAAjB,CALO,CAOP;;MACA,IAAI7F,QAAQ,CAAC,KAAK+F,IAAL,CAAU,CAAV,CAAD,CAAZ,EAA4B;QAC1B,KAAKA,IAAL,CAAUlE,OAAV,CAAkB,UAACqE,GAAD,EAAMC,QAAN,EAAmB;UACnC,MAAI,CAACC,UAAL,CAAgBF,GAAhB,EAAqBC,QAArB;QACD,CAFD;MAGD,CAJD,MAIO;QACL;QACA,KAAKJ,IAAL,CAAUlE,OAAV,CAAkB,UAACqE,GAAD,EAAMC,QAAN,EAAmB;UACnC,MAAI,CAACE,UAAL,CAAgBH,GAAhB,EAAqBC,QAArB;QACD,CAFD;MAGD;;MAED,KAAKtB,IAAL,CAAUc,KAAV;IACD,C,CACD;;;;WACA,aAAIO,GAAJ,EAAS;MACP,IAAMjC,GAAG,GAAG,KAAKqC,IAAL,EAAZ;;MAEA,IAAItG,QAAQ,CAACkG,GAAD,CAAZ,EAAmB;QACjB,KAAKE,UAAL,CAAgBF,GAAhB,EAAqBjC,GAArB;MACD,CAFD,MAEO;QACL,KAAKoC,UAAL,CAAgBH,GAAhB,EAAqBjC,GAArB;MACD;IACF,C,CACD;;;;WACA,kBAASA,GAAT,EAAc;MACZ,KAAK+B,OAAL,CAAaO,MAAb,CAAoBtC,GAApB,EAAyB,CAAzB,EADY,CAGZ;;MACA,KAAK,IAAId,CAAC,GAAGc,GAAR,EAAab,GAAG,GAAG,KAAKkD,IAAL,EAAxB,EAAqCnD,CAAC,GAAGC,GAAzC,EAA8CD,CAAC,IAAI,CAAnD,EAAsD;QACpD,KAAK6C,OAAL,CAAa7C,CAAb,EAAgBA,CAAhB,IAAqB,CAArB;MACD;IACF;;;WACD,gCAAuBqD,IAAvB,EAA6BrE,KAA7B,EAAoC;MAClC,OAAOqE,IAAI,CAAC,KAAKP,QAAL,CAAc9D,KAAd,CAAD,CAAX;IACD;;;WACD,gBAAO;MACL,OAAO,KAAK6D,OAAL,CAAavF,MAApB;IACD;;;WACD,oBAAWyF,GAAX,EAAgBC,QAAhB,EAA0B;MACxB,IAAI,CAAC9F,SAAS,CAAC6F,GAAD,CAAV,IAAmB3F,OAAO,CAAC2F,GAAD,CAA9B,EAAqC;QACnC;MACD;;MAED,IAAIO,MAAM,GAAG;QACXC,CAAC,EAAER,GADQ;QAEX/C,CAAC,EAAEgD,QAFQ;QAGXZ,CAAC,EAAE,KAAKV,IAAL,CAAU/B,GAAV,CAAcoD,GAAd;MAHQ,CAAb;MAMA,KAAKF,OAAL,CAAa/D,IAAb,CAAkBwE,MAAlB;IACD;;;WACD,oBAAWP,GAAX,EAAgBC,QAAhB,EAA0B;MAAA;;MACxB,IAAIM,MAAM,GAAG;QAAEtD,CAAC,EAAEgD,QAAL;QAAeQ,CAAC,EAAE;MAAlB,CAAb,CADwB,CAGxB;;MACA,KAAKlF,IAAL,CAAUI,OAAV,CAAkB,UAACb,GAAD,EAAM4F,QAAN,EAAmB;QACnC,IAAInH,KAAK,GAAGuB,GAAG,CAACwB,KAAJ,GAAYxB,GAAG,CAACwB,KAAJ,CAAU0D,GAAV,CAAZ,GAA6B,MAAI,CAAC1D,KAAL,CAAW0D,GAAX,EAAgBlF,GAAG,CAACsB,IAApB,CAAzC;;QAEA,IAAI,CAACjC,SAAS,CAACZ,KAAD,CAAd,EAAuB;UACrB;QACD;;QAED,IAAID,OAAO,CAACC,KAAD,CAAX,EAAoB;UAAA;YAClB,IAAIoH,UAAU,GAAG,EAAjB;YACA,IAAMC,KAAK,GAAG,CAAC;cAAEC,cAAc,EAAE,CAAC,CAAnB;cAAsBtH,KAAK,EAALA;YAAtB,CAAD,CAAd;;YAEA,OAAOqH,KAAK,CAACrG,MAAb,EAAqB;cACnB,iBAAkCqG,KAAK,CAACE,GAAN,EAAlC;cAAA,IAAQD,cAAR,cAAQA,cAAR;cAAA,IAAwBtH,MAAxB,cAAwBA,KAAxB;;cAEA,IAAI,CAACY,SAAS,CAACZ,MAAD,CAAd,EAAuB;gBACrB;cACD;;cAED,IAAIO,QAAQ,CAACP,MAAD,CAAR,IAAmB,CAACc,OAAO,CAACd,MAAD,CAA/B,EAAwC;gBACtC,IAAIwH,SAAS,GAAG;kBACdP,CAAC,EAAEjH,MADW;kBAEd0D,CAAC,EAAE4D,cAFW;kBAGdxB,CAAC,EAAE,MAAI,CAACV,IAAL,CAAU/B,GAAV,CAAcrD,MAAd;gBAHW,CAAhB;gBAMAoH,UAAU,CAAC5E,IAAX,CAAgBgF,SAAhB;cACD,CARD,MAQO,IAAIzH,OAAO,CAACC,MAAD,CAAX,EAAoB;gBACzBA,MAAK,CAACoC,OAAN,CAAc,UAAC2E,IAAD,EAAOU,CAAP,EAAa;kBACzBJ,KAAK,CAAC7E,IAAN,CAAW;oBACT8E,cAAc,EAAEG,CADP;oBAETzH,KAAK,EAAE+G;kBAFE,CAAX;gBAID,CALD;cAMD,CAPM,MAOA;YACR;;YACDC,MAAM,CAACE,CAAP,CAASC,QAAT,IAAqBC,UAArB;UA5BkB;QA6BnB,CA7BD,MA6BO,IAAI7G,QAAQ,CAACP,KAAD,CAAR,IAAmB,CAACc,OAAO,CAACd,KAAD,CAA/B,EAAwC;UAC7C,IAAIwH,SAAS,GAAG;YACdP,CAAC,EAAEjH,KADW;YAEd8F,CAAC,EAAE,MAAI,CAACV,IAAL,CAAU/B,GAAV,CAAcrD,KAAd;UAFW,CAAhB;UAKAgH,MAAM,CAACE,CAAP,CAASC,QAAT,IAAqBK,SAArB;QACD;MACF,CA5CD;MA8CA,KAAKjB,OAAL,CAAa/D,IAAb,CAAkBwE,MAAlB;IACD;;;WACD,kBAAS;MACP,OAAO;QACLhF,IAAI,EAAE,KAAKA,IADN;QAELuE,OAAO,EAAE,KAAKA;MAFT,CAAP;IAID;;;;;;AAGH,SAASmB,WAAT,CACE1F,IADF,EAEEsE,IAFF,EAIE;EAAA,gFADqE,EACrE;EAAA,wBADEvD,KACF;EAAA,IADEA,KACF,4BADUmC,MAAM,CAACnC,KACjB;EAAA,kCADwBkC,eACxB;EAAA,IADwBA,eACxB,sCAD0CC,MAAM,CAACD,eACjD;;EACA,IAAM0C,OAAO,GAAG,IAAIxB,SAAJ,CAAc;IAAEpD,KAAK,EAALA,KAAF;IAASkC,eAAe,EAAfA;EAAT,CAAd,CAAhB;EACA0C,OAAO,CAACC,OAAR,CAAgB5F,IAAI,CAAC6F,GAAL,CAASvF,SAAT,CAAhB;EACAqF,OAAO,CAACG,UAAR,CAAmBxB,IAAnB;EACAqB,OAAO,CAACI,MAAR;EACA,OAAOJ,OAAP;AACD;;AAED,SAASK,UAAT,CACEC,IADF,EAGE;EAAA,gFADqE,EACrE;EAAA,wBADElF,KACF;EAAA,IADEA,KACF,4BADUmC,MAAM,CAACnC,KACjB;EAAA,kCADwBkC,eACxB;EAAA,IADwBA,eACxB,sCAD0CC,MAAM,CAACD,eACjD;;EACA,IAAQjD,IAAR,GAA0BiG,IAA1B,CAAQjG,IAAR;EAAA,IAAcuE,OAAd,GAA0B0B,IAA1B,CAAc1B,OAAd;EACA,IAAMoB,OAAO,GAAG,IAAIxB,SAAJ,CAAc;IAAEpD,KAAK,EAALA,KAAF;IAASkC,eAAe,EAAfA;EAAT,CAAd,CAAhB;EACA0C,OAAO,CAACC,OAAR,CAAgB5F,IAAhB;EACA2F,OAAO,CAACtB,eAAR,CAAwBE,OAAxB;EACA,OAAOoB,OAAP;AACD;;AAED,SAASO,cAAT,CACEC,OADF,EASE;EAAA,gFADI,EACJ;EAAA,yBANEC,MAMF;EAAA,IANEA,MAMF,6BANW,CAMX;EAAA,kCALEC,eAKF;EAAA,IALEA,eAKF,sCALoB,CAKpB;EAAA,kCAJEC,gBAIF;EAAA,IAJEA,gBAIF,sCAJqB,CAIrB;EAAA,2BAHE1D,QAGF;EAAA,IAHEA,QAGF,+BAHaM,MAAM,CAACN,QAGpB;EAAA,iCAFEG,cAEF;EAAA,IAFEA,cAEF,qCAFmBG,MAAM,CAACH,cAE1B;;EACA,IAAMwD,QAAQ,GAAGH,MAAM,GAAGD,OAAO,CAACnH,MAAlC;;EAEA,IAAI+D,cAAJ,EAAoB;IAClB,OAAOwD,QAAP;EACD;;EAED,IAAMC,SAAS,GAAG/C,IAAI,CAACgD,GAAL,CAASH,gBAAgB,GAAGD,eAA5B,CAAlB;;EAEA,IAAI,CAACzD,QAAL,EAAe;IACb;IACA,OAAO4D,SAAS,GAAG,GAAH,GAASD,QAAzB;EACD;;EAED,OAAOA,QAAQ,GAAGC,SAAS,GAAG5D,QAA9B;AACD;;AAED,SAAS8D,oBAAT,GAGE;EAAA,IAFAC,SAEA,uEAFY,EAEZ;EAAA,IADA5E,kBACA,uEADqBmB,MAAM,CAACnB,kBAC5B;EACA,IAAI6E,OAAO,GAAG,EAAd;EACA,IAAIC,KAAK,GAAG,CAAC,CAAb;EACA,IAAIC,GAAG,GAAG,CAAC,CAAX;EACA,IAAIpF,CAAC,GAAG,CAAR;;EAEA,KAAK,IAAIC,GAAG,GAAGgF,SAAS,CAAC3H,MAAzB,EAAiC0C,CAAC,GAAGC,GAArC,EAA0CD,CAAC,IAAI,CAA/C,EAAkD;IAChD,IAAIkC,KAAK,GAAG+C,SAAS,CAACjF,CAAD,CAArB;;IACA,IAAIkC,KAAK,IAAIiD,KAAK,KAAK,CAAC,CAAxB,EAA2B;MACzBA,KAAK,GAAGnF,CAAR;IACD,CAFD,MAEO,IAAI,CAACkC,KAAD,IAAUiD,KAAK,KAAK,CAAC,CAAzB,EAA4B;MACjCC,GAAG,GAAGpF,CAAC,GAAG,CAAV;;MACA,IAAIoF,GAAG,GAAGD,KAAN,GAAc,CAAd,IAAmB9E,kBAAvB,EAA2C;QACzC6E,OAAO,CAACpG,IAAR,CAAa,CAACqG,KAAD,EAAQC,GAAR,CAAb;MACD;;MACDD,KAAK,GAAG,CAAC,CAAT;IACD;EACF,CAjBD,CAmBA;;;EACA,IAAIF,SAAS,CAACjF,CAAC,GAAG,CAAL,CAAT,IAAoBA,CAAC,GAAGmF,KAAJ,IAAa9E,kBAArC,EAAyD;IACvD6E,OAAO,CAACpG,IAAR,CAAa,CAACqG,KAAD,EAAQnF,CAAC,GAAG,CAAZ,CAAb;EACD;;EAED,OAAOkF,OAAP;AACD,C,CAED;;;AACA,IAAMG,QAAQ,GAAG,EAAjB;;AAEA,SAASC,MAAT,CACEC,IADF,EAEEd,OAFF,EAGEe,eAHF,EAaE;EAAA,gFADI,EACJ;EAAA,2BARExE,QAQF;EAAA,IAREA,QAQF,+BARaQ,MAAM,CAACR,QAQpB;EAAA,2BAPEE,QAOF;EAAA,IAPEA,QAOF,+BAPaM,MAAM,CAACN,QAOpB;EAAA,4BANED,SAMF;EAAA,IANEA,SAMF,gCANcO,MAAM,CAACP,SAMrB;EAAA,iCALEb,cAKF;EAAA,IALEA,cAKF,qCALmBoB,MAAM,CAACpB,cAK1B;EAAA,kCAJEC,kBAIF;EAAA,IAJEA,kBAIF,sCAJuBmB,MAAM,CAACnB,kBAI9B;EAAA,iCAHEF,cAGF;EAAA,IAHEA,cAGF,qCAHmBqB,MAAM,CAACrB,cAG1B;EAAA,iCAFEkB,cAEF;EAAA,IAFEA,cAEF,qCAFmBG,MAAM,CAACH,cAE1B;;EACA,IAAIoD,OAAO,CAACnH,MAAR,GAAiB+H,QAArB,EAA+B;IAC7B,MAAM,IAAI7F,KAAJ,CAAU1B,wBAAwB,CAACuH,QAAD,CAAlC,CAAN;EACD;;EAED,IAAMI,UAAU,GAAGhB,OAAO,CAACnH,MAA3B,CALA,CAMA;;EACA,IAAMoI,OAAO,GAAGH,IAAI,CAACjI,MAArB,CAPA,CAQA;;EACA,IAAMsH,gBAAgB,GAAG7C,IAAI,CAAChE,GAAL,CAAS,CAAT,EAAYgE,IAAI,CAAC4D,GAAL,CAAS3E,QAAT,EAAmB0E,OAAnB,CAAZ,CAAzB,CATA,CAUA;;EACA,IAAIE,gBAAgB,GAAG3E,SAAvB,CAXA,CAYA;;EACA,IAAI4E,YAAY,GAAGjB,gBAAnB,CAbA,CAeA;EACA;;EACA,IAAMkB,cAAc,GAAGzF,kBAAkB,GAAG,CAArB,IAA0BF,cAAjD,CAjBA,CAkBA;;EACA,IAAM4F,SAAS,GAAGD,cAAc,GAAGvJ,KAAK,CAACmJ,OAAD,CAAR,GAAoB,EAApD;EAEA,IAAI3F,KAAJ,CArBA,CAuBA;;EACA,OAAO,CAACA,KAAK,GAAGwF,IAAI,CAACS,OAAL,CAAavB,OAAb,EAAsBoB,YAAtB,CAAT,IAAgD,CAAC,CAAxD,EAA2D;IACzD,IAAIhF,KAAK,GAAG2D,cAAc,CAACC,OAAD,EAAU;MAClCE,eAAe,EAAE5E,KADiB;MAElC6E,gBAAgB,EAAhBA,gBAFkC;MAGlC1D,QAAQ,EAARA,QAHkC;MAIlCG,cAAc,EAAdA;IAJkC,CAAV,CAA1B;IAOAuE,gBAAgB,GAAG7D,IAAI,CAAC4D,GAAL,CAAS9E,KAAT,EAAgB+E,gBAAhB,CAAnB;IACAC,YAAY,GAAG9F,KAAK,GAAG0F,UAAvB;;IAEA,IAAIK,cAAJ,EAAoB;MAClB,IAAI9F,CAAC,GAAG,CAAR;;MACA,OAAOA,CAAC,GAAGyF,UAAX,EAAuB;QACrBM,SAAS,CAAChG,KAAK,GAAGC,CAAT,CAAT,GAAuB,CAAvB;QACAA,CAAC,IAAI,CAAL;MACD;IACF;EACF,CA1CD,CA4CA;;;EACA6F,YAAY,GAAG,CAAC,CAAhB;EAEA,IAAII,UAAU,GAAG,EAAjB;EACA,IAAIC,UAAU,GAAG,CAAjB;EACA,IAAIC,MAAM,GAAGV,UAAU,GAAGC,OAA1B;EAEA,IAAMU,IAAI,GAAG,KAAMX,UAAU,GAAG,CAAhC;;EAEA,KAAK,IAAIzF,EAAC,GAAG,CAAb,EAAgBA,EAAC,GAAGyF,UAApB,EAAgCzF,EAAC,IAAI,CAArC,EAAwC;IACtC;IACA;IACA;IACA,IAAIqG,MAAM,GAAG,CAAb;IACA,IAAIC,MAAM,GAAGH,MAAb;;IAEA,OAAOE,MAAM,GAAGC,MAAhB,EAAwB;MACtB,IAAMzF,OAAK,GAAG2D,cAAc,CAACC,OAAD,EAAU;QACpCC,MAAM,EAAE1E,EAD4B;QAEpC2E,eAAe,EAAEC,gBAAgB,GAAG0B,MAFA;QAGpC1B,gBAAgB,EAAhBA,gBAHoC;QAIpC1D,QAAQ,EAARA,QAJoC;QAKpCG,cAAc,EAAdA;MALoC,CAAV,CAA5B;;MAQA,IAAIR,OAAK,IAAI+E,gBAAb,EAA+B;QAC7BS,MAAM,GAAGC,MAAT;MACD,CAFD,MAEO;QACLH,MAAM,GAAGG,MAAT;MACD;;MAEDA,MAAM,GAAGvE,IAAI,CAACwE,KAAL,CAAW,CAACJ,MAAM,GAAGE,MAAV,IAAoB,CAApB,GAAwBA,MAAnC,CAAT;IACD,CAvBqC,CAyBtC;;;IACAF,MAAM,GAAGG,MAAT;IAEA,IAAInB,KAAK,GAAGpD,IAAI,CAAChE,GAAL,CAAS,CAAT,EAAY6G,gBAAgB,GAAG0B,MAAnB,GAA4B,CAAxC,CAAZ;IACA,IAAIE,MAAM,GAAGpG,cAAc,GACvBsF,OADuB,GAEvB3D,IAAI,CAAC4D,GAAL,CAASf,gBAAgB,GAAG0B,MAA5B,EAAoCZ,OAApC,IAA+CD,UAFnD,CA7BsC,CAiCtC;;IACA,IAAIgB,MAAM,GAAGlK,KAAK,CAACiK,MAAM,GAAG,CAAV,CAAlB;IAEAC,MAAM,CAACD,MAAM,GAAG,CAAV,CAAN,GAAqB,CAAC,KAAKxG,EAAN,IAAW,CAAhC;;IAEA,KAAK,IAAI0G,CAAC,GAAGF,MAAb,EAAqBE,CAAC,IAAIvB,KAA1B,EAAiCuB,CAAC,IAAI,CAAtC,EAAyC;MACvC,IAAI/B,eAAe,GAAG+B,CAAC,GAAG,CAA1B;MACA,IAAIC,SAAS,GAAGnB,eAAe,CAACD,IAAI,CAACqB,MAAL,CAAYjC,eAAZ,CAAD,CAA/B;;MAEA,IAAImB,cAAJ,EAAoB;QAClB;QACAC,SAAS,CAACpB,eAAD,CAAT,GAA6B,CAAC,CAAC,CAACgC,SAAhC;MACD,CAPsC,CASvC;;;MACAF,MAAM,CAACC,CAAD,CAAN,GAAY,CAAED,MAAM,CAACC,CAAC,GAAG,CAAL,CAAN,IAAiB,CAAlB,GAAuB,CAAxB,IAA6BC,SAAzC,CAVuC,CAYvC;;MACA,IAAI3G,EAAJ,EAAO;QACLyG,MAAM,CAACC,CAAD,CAAN,IACG,CAACT,UAAU,CAACS,CAAC,GAAG,CAAL,CAAV,GAAoBT,UAAU,CAACS,CAAD,CAA/B,KAAuC,CAAxC,GAA6C,CAA7C,GAAiDT,UAAU,CAACS,CAAC,GAAG,CAAL,CAD7D;MAED;;MAED,IAAID,MAAM,CAACC,CAAD,CAAN,GAAYN,IAAhB,EAAsB;QACpBF,UAAU,GAAG1B,cAAc,CAACC,OAAD,EAAU;UACnCC,MAAM,EAAE1E,EAD2B;UAEnC2E,eAAe,EAAfA,eAFmC;UAGnCC,gBAAgB,EAAhBA,gBAHmC;UAInC1D,QAAQ,EAARA,QAJmC;UAKnCG,cAAc,EAAdA;QALmC,CAAV,CAA3B,CADoB,CASpB;QACA;;QACA,IAAI6E,UAAU,IAAIN,gBAAlB,EAAoC;UAClC;UACAA,gBAAgB,GAAGM,UAAnB;UACAL,YAAY,GAAGlB,eAAf,CAHkC,CAKlC;;UACA,IAAIkB,YAAY,IAAIjB,gBAApB,EAAsC;YACpC;UACD,CARiC,CAUlC;;;UACAO,KAAK,GAAGpD,IAAI,CAAChE,GAAL,CAAS,CAAT,EAAY,IAAI6G,gBAAJ,GAAuBiB,YAAnC,CAAR;QACD;MACF;IACF,CAjFqC,CAmFtC;;;IACA,IAAMhF,MAAK,GAAG2D,cAAc,CAACC,OAAD,EAAU;MACpCC,MAAM,EAAE1E,EAAC,GAAG,CADwB;MAEpC2E,eAAe,EAAEC,gBAFmB;MAGpCA,gBAAgB,EAAhBA,gBAHoC;MAIpC1D,QAAQ,EAARA,QAJoC;MAKpCG,cAAc,EAAdA;IALoC,CAAV,CAA5B;;IAQA,IAAIR,MAAK,GAAG+E,gBAAZ,EAA8B;MAC5B;IACD;;IAEDK,UAAU,GAAGQ,MAAb;EACD;;EAED,IAAM9J,MAAM,GAAG;IACbkK,OAAO,EAAEhB,YAAY,IAAI,CADZ;IAEb;IACAhF,KAAK,EAAEkB,IAAI,CAAChE,GAAL,CAAS,KAAT,EAAgBmI,UAAhB;EAHM,CAAf;;EAMA,IAAIJ,cAAJ,EAAoB;IAClB,IAAMZ,OAAO,GAAGF,oBAAoB,CAACe,SAAD,EAAY1F,kBAAZ,CAApC;;IACA,IAAI,CAAC6E,OAAO,CAAC5H,MAAb,EAAqB;MACnBX,MAAM,CAACkK,OAAP,GAAiB,KAAjB;IACD,CAFD,MAEO,IAAI1G,cAAJ,EAAoB;MACzBxD,MAAM,CAACuI,OAAP,GAAiBA,OAAjB;IACD;EACF;;EAED,OAAOvI,MAAP;AACD;;AAED,SAASmK,qBAAT,CAA+BrC,OAA/B,EAAwC;EACtC,IAAI2B,IAAI,GAAG,EAAX;;EAEA,KAAK,IAAIpG,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGwE,OAAO,CAACnH,MAA9B,EAAsC0C,CAAC,GAAGC,GAA1C,EAA+CD,CAAC,IAAI,CAApD,EAAuD;IACrD,IAAM+G,IAAI,GAAGtC,OAAO,CAACmC,MAAR,CAAe5G,CAAf,CAAb;IACAoG,IAAI,CAACW,IAAD,CAAJ,GAAa,CAACX,IAAI,CAACW,IAAD,CAAJ,IAAc,CAAf,IAAqB,KAAM9G,GAAG,GAAGD,CAAN,GAAU,CAAlD;EACD;;EAED,OAAOoG,IAAP;AACD;;IAEKY,W;EACJ,qBACEvC,OADF,EAYE;IAAA;;IAAA,gFADI,EACJ;IAAA,2BATEzD,QASF;IAAA,IATEA,QASF,+BATaQ,MAAM,CAACR,QASpB;IAAA,4BAREC,SAQF;IAAA,IAREA,SAQF,gCARcO,MAAM,CAACP,SAQrB;IAAA,2BAPEC,QAOF;IAAA,IAPEA,QAOF,+BAPaM,MAAM,CAACN,QAOpB;IAAA,iCANEf,cAMF;IAAA,IANEA,cAMF,qCANmBqB,MAAM,CAACrB,cAM1B;IAAA,iCALEC,cAKF;IAAA,IALEA,cAKF,qCALmBoB,MAAM,CAACpB,cAK1B;IAAA,kCAJEC,kBAIF;IAAA,IAJEA,kBAIF,sCAJuBmB,MAAM,CAACnB,kBAI9B;IAAA,kCAHEE,eAGF;IAAA,IAHEA,eAGF,sCAHoBiB,MAAM,CAACjB,eAG3B;IAAA,iCAFEc,cAEF;IAAA,IAFEA,cAEF,qCAFmBG,MAAM,CAACH,cAE1B;;IAAA;;IACA,KAAK4F,OAAL,GAAe;MACbjG,QAAQ,EAARA,QADa;MAEbC,SAAS,EAATA,SAFa;MAGbC,QAAQ,EAARA,QAHa;MAIbf,cAAc,EAAdA,cAJa;MAKbC,cAAc,EAAdA,cALa;MAMbC,kBAAkB,EAAlBA,kBANa;MAObE,eAAe,EAAfA,eAPa;MAQbc,cAAc,EAAdA;IARa,CAAf;IAWA,KAAKoD,OAAL,GAAelE,eAAe,GAAGkE,OAAH,GAAaA,OAAO,CAACyC,WAAR,EAA3C;IAEA,KAAKC,MAAL,GAAc,EAAd;;IAEA,IAAI,CAAC,KAAK1C,OAAL,CAAanH,MAAlB,EAA0B;MACxB;IACD;;IAED,IAAM8J,QAAQ,GAAG,SAAXA,QAAW,CAAC3C,OAAD,EAAU4C,UAAV,EAAyB;MACxC,MAAI,CAACF,MAAL,CAAYrI,IAAZ,CAAiB;QACf2F,OAAO,EAAPA,OADe;QAEf6C,QAAQ,EAAER,qBAAqB,CAACrC,OAAD,CAFhB;QAGf4C,UAAU,EAAVA;MAHe,CAAjB;IAKD,CAND;;IAQA,IAAMpH,GAAG,GAAG,KAAKwE,OAAL,CAAanH,MAAzB;;IAEA,IAAI2C,GAAG,GAAGoF,QAAV,EAAoB;MAClB,IAAIrF,CAAC,GAAG,CAAR;MACA,IAAMuH,SAAS,GAAGtH,GAAG,GAAGoF,QAAxB;MACA,IAAMD,GAAG,GAAGnF,GAAG,GAAGsH,SAAlB;;MAEA,OAAOvH,CAAC,GAAGoF,GAAX,EAAgB;QACdgC,QAAQ,CAAC,KAAK3C,OAAL,CAAa+C,MAAb,CAAoBxH,CAApB,EAAuBqF,QAAvB,CAAD,EAAmCrF,CAAnC,CAAR;QACAA,CAAC,IAAIqF,QAAL;MACD;;MAED,IAAIkC,SAAJ,EAAe;QACb,IAAMF,UAAU,GAAGpH,GAAG,GAAGoF,QAAzB;QACA+B,QAAQ,CAAC,KAAK3C,OAAL,CAAa+C,MAAb,CAAoBH,UAApB,CAAD,EAAkCA,UAAlC,CAAR;MACD;IACF,CAdD,MAcO;MACLD,QAAQ,CAAC,KAAK3C,OAAN,EAAe,CAAf,CAAR;IACD;EACF;;;;WAED,kBAASc,IAAT,EAAe;MACb,oBAA4C,KAAK0B,OAAjD;MAAA,IAAQ1G,eAAR,iBAAQA,eAAR;MAAA,IAAyBJ,cAAzB,iBAAyBA,cAAzB;;MAEA,IAAI,CAACI,eAAL,EAAsB;QACpBgF,IAAI,GAAGA,IAAI,CAAC2B,WAAL,EAAP;MACD,CALY,CAOb;;;MACA,IAAI,KAAKzC,OAAL,KAAiBc,IAArB,EAA2B;QACzB,IAAI5I,OAAM,GAAG;UACXkK,OAAO,EAAE,IADE;UAEXhG,KAAK,EAAE;QAFI,CAAb;;QAKA,IAAIV,cAAJ,EAAoB;UAClBxD,OAAM,CAACuI,OAAP,GAAiB,CAAC,CAAC,CAAD,EAAIK,IAAI,CAACjI,MAAL,GAAc,CAAlB,CAAD,CAAjB;QACD;;QAED,OAAOX,OAAP;MACD,CAnBY,CAqBb;;;MACA,qBAOI,KAAKsK,OAPT;MAAA,IACEjG,QADF,kBACEA,QADF;MAAA,IAEEE,QAFF,kBAEEA,QAFF;MAAA,IAGED,SAHF,kBAGEA,SAHF;MAAA,IAIEb,cAJF,kBAIEA,cAJF;MAAA,IAKEC,kBALF,kBAKEA,kBALF;MAAA,IAMEgB,cANF,kBAMEA,cANF;MASA,IAAIoG,UAAU,GAAG,EAAjB;MACA,IAAIC,UAAU,GAAG,CAAjB;MACA,IAAIC,UAAU,GAAG,KAAjB;MAEA,KAAKR,MAAL,CAAYzI,OAAZ,CAAoB,iBAAuC;QAAA,IAApC+F,OAAoC,SAApCA,OAAoC;QAAA,IAA3B6C,QAA2B,SAA3BA,QAA2B;QAAA,IAAjBD,UAAiB,SAAjBA,UAAiB;;QACzD,cAAoC/B,MAAM,CAACC,IAAD,EAAOd,OAAP,EAAgB6C,QAAhB,EAA0B;UAClEtG,QAAQ,EAAEA,QAAQ,GAAGqG,UAD6C;UAElEnG,QAAQ,EAARA,QAFkE;UAGlED,SAAS,EAATA,SAHkE;UAIlEb,cAAc,EAAdA,cAJkE;UAKlEC,kBAAkB,EAAlBA,kBALkE;UAMlEF,cAAc,EAAdA,cANkE;UAOlEkB,cAAc,EAAdA;QAPkE,CAA1B,CAA1C;QAAA,IAAQwF,OAAR,WAAQA,OAAR;QAAA,IAAiBhG,KAAjB,WAAiBA,KAAjB;QAAA,IAAwBqE,OAAxB,WAAwBA,OAAxB;;QAUA,IAAI2B,OAAJ,EAAa;UACXc,UAAU,GAAG,IAAb;QACD;;QAEDD,UAAU,IAAI7G,KAAd;;QAEA,IAAIgG,OAAO,IAAI3B,OAAf,EAAwB;UACtBuC,UAAU,gCAAOA,UAAP,sBAAsBvC,OAAtB,EAAV;QACD;MACF,CApBD;MAsBA,IAAIvI,MAAM,GAAG;QACXkK,OAAO,EAAEc,UADE;QAEX9G,KAAK,EAAE8G,UAAU,GAAGD,UAAU,GAAG,KAAKP,MAAL,CAAY7J,MAA5B,GAAqC;MAF3C,CAAb;;MAKA,IAAIqK,UAAU,IAAIxH,cAAlB,EAAkC;QAChCxD,MAAM,CAACuI,OAAP,GAAiBuC,UAAjB;MACD;;MAED,OAAO9K,MAAP;IACD;;;;;;IAGGiL,S;EACJ,mBAAYnD,OAAZ,EAAqB;IAAA;;IACnB,KAAKA,OAAL,GAAeA,OAAf;EACD;;;;WAOD;MAAO;IAAP,SAAiB,CAAE;;;WANnB,sBAAoBA,OAApB,EAA6B;MAC3B,OAAOoD,QAAQ,CAACpD,OAAD,EAAU,KAAKqD,UAAf,CAAf;IACD;;;WACD,uBAAqBrD,OAArB,EAA8B;MAC5B,OAAOoD,QAAQ,CAACpD,OAAD,EAAU,KAAKsD,WAAf,CAAf;IACD;;;;;;AAIH,SAASF,QAAT,CAAkBpD,OAAlB,EAA2BuD,GAA3B,EAAgC;EAC9B,IAAMC,OAAO,GAAGxD,OAAO,CAACvC,KAAR,CAAc8F,GAAd,CAAhB;EACA,OAAOC,OAAO,GAAGA,OAAO,CAAC,CAAD,CAAV,GAAgB,IAA9B;AACD,C,CAED;;;IAEMC,U;;;;;EACJ,oBAAYzD,OAAZ,EAAqB;IAAA;;IAAA,yBACbA,OADa;EAEpB;;;;WAUD,gBAAOc,IAAP,EAAa;MACX,IAAMsB,OAAO,GAAGtB,IAAI,KAAK,KAAKd,OAA9B;MAEA,OAAO;QACLoC,OAAO,EAAPA,OADK;QAELhG,KAAK,EAAEgG,OAAO,GAAG,CAAH,GAAO,CAFhB;QAGL3B,OAAO,EAAE,CAAC,CAAD,EAAI,KAAKT,OAAL,CAAanH,MAAb,GAAsB,CAA1B;MAHJ,CAAP;IAKD;;;SAjBD,eAAkB;MAChB,OAAO,OAAP;IACD;;;SACD,eAAwB;MACtB,OAAO,WAAP;IACD;;;SACD,eAAyB;MACvB,OAAO,SAAP;IACD;;;;EAZsBsK,S,GAwBzB;;;IAEMO,iB;;;;;EACJ,2BAAY1D,OAAZ,EAAqB;IAAA;;IAAA,0BACbA,OADa;EAEpB;;;;WAUD,gBAAOc,IAAP,EAAa;MACX,IAAMxF,KAAK,GAAGwF,IAAI,CAACS,OAAL,CAAa,KAAKvB,OAAlB,CAAd;MACA,IAAMoC,OAAO,GAAG9G,KAAK,KAAK,CAAC,CAA3B;MAEA,OAAO;QACL8G,OAAO,EAAPA,OADK;QAELhG,KAAK,EAAEgG,OAAO,GAAG,CAAH,GAAO,CAFhB;QAGL3B,OAAO,EAAE,CAAC,CAAD,EAAIK,IAAI,CAACjI,MAAL,GAAc,CAAlB;MAHJ,CAAP;IAKD;;;SAlBD,eAAkB;MAChB,OAAO,eAAP;IACD;;;SACD,eAAwB;MACtB,OAAO,WAAP;IACD;;;SACD,eAAyB;MACvB,OAAO,SAAP;IACD;;;;EAZ6BsK,S,GAyBhC;;;IAEMQ,gB;;;;;EACJ,0BAAY3D,OAAZ,EAAqB;IAAA;;IAAA,0BACbA,OADa;EAEpB;;;;WAUD,gBAAOc,IAAP,EAAa;MACX,IAAMsB,OAAO,GAAGtB,IAAI,CAAC8C,UAAL,CAAgB,KAAK5D,OAArB,CAAhB;MAEA,OAAO;QACLoC,OAAO,EAAPA,OADK;QAELhG,KAAK,EAAEgG,OAAO,GAAG,CAAH,GAAO,CAFhB;QAGL3B,OAAO,EAAE,CAAC,CAAD,EAAI,KAAKT,OAAL,CAAanH,MAAb,GAAsB,CAA1B;MAHJ,CAAP;IAKD;;;SAjBD,eAAkB;MAChB,OAAO,cAAP;IACD;;;SACD,eAAwB;MACtB,OAAO,YAAP;IACD;;;SACD,eAAyB;MACvB,OAAO,UAAP;IACD;;;;EAZ4BsK,S,GAwB/B;;;IAEMU,uB;;;;;EACJ,iCAAY7D,OAAZ,EAAqB;IAAA;;IAAA,0BACbA,OADa;EAEpB;;;;WAUD,gBAAOc,IAAP,EAAa;MACX,IAAMsB,OAAO,GAAG,CAACtB,IAAI,CAAC8C,UAAL,CAAgB,KAAK5D,OAArB,CAAjB;MAEA,OAAO;QACLoC,OAAO,EAAPA,OADK;QAELhG,KAAK,EAAEgG,OAAO,GAAG,CAAH,GAAO,CAFhB;QAGL3B,OAAO,EAAE,CAAC,CAAD,EAAIK,IAAI,CAACjI,MAAL,GAAc,CAAlB;MAHJ,CAAP;IAKD;;;SAjBD,eAAkB;MAChB,OAAO,sBAAP;IACD;;;SACD,eAAwB;MACtB,OAAO,aAAP;IACD;;;SACD,eAAyB;MACvB,OAAO,WAAP;IACD;;;;EAZmCsK,S,GAwBtC;;;IAEMW,gB;;;;;EACJ,0BAAY9D,OAAZ,EAAqB;IAAA;;IAAA,0BACbA,OADa;EAEpB;;;;WAUD,gBAAOc,IAAP,EAAa;MACX,IAAMsB,OAAO,GAAGtB,IAAI,CAACiD,QAAL,CAAc,KAAK/D,OAAnB,CAAhB;MAEA,OAAO;QACLoC,OAAO,EAAPA,OADK;QAELhG,KAAK,EAAEgG,OAAO,GAAG,CAAH,GAAO,CAFhB;QAGL3B,OAAO,EAAE,CAACK,IAAI,CAACjI,MAAL,GAAc,KAAKmH,OAAL,CAAanH,MAA5B,EAAoCiI,IAAI,CAACjI,MAAL,GAAc,CAAlD;MAHJ,CAAP;IAKD;;;SAjBD,eAAkB;MAChB,OAAO,cAAP;IACD;;;SACD,eAAwB;MACtB,OAAO,YAAP;IACD;;;SACD,eAAyB;MACvB,OAAO,UAAP;IACD;;;;EAZ4BsK,S,GAwB/B;;;IAEMa,uB;;;;;EACJ,iCAAYhE,OAAZ,EAAqB;IAAA;;IAAA,0BACbA,OADa;EAEpB;;;;WAUD,gBAAOc,IAAP,EAAa;MACX,IAAMsB,OAAO,GAAG,CAACtB,IAAI,CAACiD,QAAL,CAAc,KAAK/D,OAAnB,CAAjB;MACA,OAAO;QACLoC,OAAO,EAAPA,OADK;QAELhG,KAAK,EAAEgG,OAAO,GAAG,CAAH,GAAO,CAFhB;QAGL3B,OAAO,EAAE,CAAC,CAAD,EAAIK,IAAI,CAACjI,MAAL,GAAc,CAAlB;MAHJ,CAAP;IAKD;;;SAhBD,eAAkB;MAChB,OAAO,sBAAP;IACD;;;SACD,eAAwB;MACtB,OAAO,aAAP;IACD;;;SACD,eAAyB;MACvB,OAAO,WAAP;IACD;;;;EAZmCsK,S;;IAuBhCc,U;;;;;EACJ,oBACEjE,OADF,EAYE;IAAA;;IAAA,gFADI,EACJ;IAAA,2BATEzD,QASF;IAAA,IATEA,QASF,+BATaQ,MAAM,CAACR,QASpB;IAAA,4BAREC,SAQF;IAAA,IAREA,SAQF,gCARcO,MAAM,CAACP,SAQrB;IAAA,2BAPEC,QAOF;IAAA,IAPEA,QAOF,+BAPaM,MAAM,CAACN,QAOpB;IAAA,iCANEf,cAMF;IAAA,IANEA,cAMF,qCANmBqB,MAAM,CAACrB,cAM1B;IAAA,iCALEC,cAKF;IAAA,IALEA,cAKF,qCALmBoB,MAAM,CAACpB,cAK1B;IAAA,kCAJEC,kBAIF;IAAA,IAJEA,kBAIF,sCAJuBmB,MAAM,CAACnB,kBAI9B;IAAA,kCAHEE,eAGF;IAAA,IAHEA,eAGF,sCAHoBiB,MAAM,CAACjB,eAG3B;IAAA,iCAFEc,cAEF;IAAA,IAFEA,cAEF,qCAFmBG,MAAM,CAACH,cAE1B;;IAAA;;IACA,4BAAMoD,OAAN;IACA,OAAKkE,YAAL,GAAoB,IAAI3B,WAAJ,CAAgBvC,OAAhB,EAAyB;MAC3CzD,QAAQ,EAARA,QAD2C;MAE3CC,SAAS,EAATA,SAF2C;MAG3CC,QAAQ,EAARA,QAH2C;MAI3Cf,cAAc,EAAdA,cAJ2C;MAK3CC,cAAc,EAAdA,cAL2C;MAM3CC,kBAAkB,EAAlBA,kBAN2C;MAO3CE,eAAe,EAAfA,eAP2C;MAQ3Cc,cAAc,EAAdA;IAR2C,CAAzB,CAApB;IAFA;EAYD;;;;WAUD,gBAAOkE,IAAP,EAAa;MACX,OAAO,KAAKoD,YAAL,CAAkBC,QAAlB,CAA2BrD,IAA3B,CAAP;IACD;;;SAXD,eAAkB;MAChB,OAAO,OAAP;IACD;;;SACD,eAAwB;MACtB,OAAO,UAAP;IACD;;;SACD,eAAyB;MACvB,OAAO,QAAP;IACD;;;;EAlCsBqC,S,GAwCzB;;;IAEMiB,Y;;;;;EACJ,sBAAYpE,OAAZ,EAAqB;IAAA;;IAAA,0BACbA,OADa;EAEpB;;;;WAUD,gBAAOc,IAAP,EAAa;MACX,IAAIvE,QAAQ,GAAG,CAAf;MACA,IAAIjB,KAAJ;MAEA,IAAMmF,OAAO,GAAG,EAAhB;MACA,IAAMO,UAAU,GAAG,KAAKhB,OAAL,CAAanH,MAAhC,CALW,CAOX;;MACA,OAAO,CAACyC,KAAK,GAAGwF,IAAI,CAACS,OAAL,CAAa,KAAKvB,OAAlB,EAA2BzD,QAA3B,CAAT,IAAiD,CAAC,CAAzD,EAA4D;QAC1DA,QAAQ,GAAGjB,KAAK,GAAG0F,UAAnB;QACAP,OAAO,CAACpG,IAAR,CAAa,CAACiB,KAAD,EAAQiB,QAAQ,GAAG,CAAnB,CAAb;MACD;;MAED,IAAM6F,OAAO,GAAG,CAAC,CAAC3B,OAAO,CAAC5H,MAA1B;MAEA,OAAO;QACLuJ,OAAO,EAAPA,OADK;QAELhG,KAAK,EAAEgG,OAAO,GAAG,CAAH,GAAO,CAFhB;QAGL3B,OAAO,EAAPA;MAHK,CAAP;IAKD;;;SA7BD,eAAkB;MAChB,OAAO,SAAP;IACD;;;SACD,eAAwB;MACtB,OAAO,WAAP;IACD;;;SACD,eAAyB;MACvB,OAAO,SAAP;IACD;;;;EAZwB0C,S,GAoC3B;;;AACA,IAAMkB,SAAS,GAAG,CAChBZ,UADgB,EAEhBW,YAFgB,EAGhBT,gBAHgB,EAIhBE,uBAJgB,EAKhBG,uBALgB,EAMhBF,gBANgB,EAOhBJ,iBAPgB,EAQhBO,UARgB,CAAlB;AAWA,IAAMK,YAAY,GAAGD,SAAS,CAACxL,MAA/B,C,CAEA;;AACA,IAAM0L,QAAQ,GAAG,oCAAjB;AACA,IAAMC,QAAQ,GAAG,GAAjB,C,CAEA;AACA;AACA;;AACA,SAASC,UAAT,CAAoBzE,OAApB,EAA2C;EAAA,IAAdwC,OAAc,uEAAJ,EAAI;EACzC,OAAOxC,OAAO,CAAChF,KAAR,CAAcwJ,QAAd,EAAwB9E,GAAxB,CAA4B,UAACd,IAAD,EAAU;IAC3C,IAAI8F,KAAK,GAAG9F,IAAI,CACbhG,IADS,GAEToC,KAFS,CAEHuJ,QAFG,EAGTI,MAHS,CAGF,UAAC/F,IAAD;MAAA,OAAUA,IAAI,IAAI,CAAC,CAACA,IAAI,CAAChG,IAAL,EAApB;IAAA,CAHE,CAAZ;IAKA,IAAIgM,OAAO,GAAG,EAAd;;IACA,KAAK,IAAIrJ,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGkJ,KAAK,CAAC7L,MAA5B,EAAoC0C,CAAC,GAAGC,GAAxC,EAA6CD,CAAC,IAAI,CAAlD,EAAqD;MACnD,IAAMsJ,SAAS,GAAGH,KAAK,CAACnJ,CAAD,CAAvB,CADmD,CAGnD;;MACA,IAAIuJ,KAAK,GAAG,KAAZ;MACA,IAAIzI,GAAG,GAAG,CAAC,CAAX;;MACA,OAAO,CAACyI,KAAD,IAAU,EAAEzI,GAAF,GAAQiI,YAAzB,EAAuC;QACrC,IAAMS,QAAQ,GAAGV,SAAS,CAAChI,GAAD,CAA1B;QACA,IAAI2I,KAAK,GAAGD,QAAQ,CAACE,YAAT,CAAsBJ,SAAtB,CAAZ;;QACA,IAAIG,KAAJ,EAAW;UACTJ,OAAO,CAACvK,IAAR,CAAa,IAAI0K,QAAJ,CAAaC,KAAb,EAAoBxC,OAApB,CAAb;UACAsC,KAAK,GAAG,IAAR;QACD;MACF;;MAED,IAAIA,KAAJ,EAAW;QACT;MACD,CAjBkD,CAmBnD;;;MACAzI,GAAG,GAAG,CAAC,CAAP;;MACA,OAAO,EAAEA,GAAF,GAAQiI,YAAf,EAA6B;QAC3B,IAAMS,SAAQ,GAAGV,SAAS,CAAChI,GAAD,CAA1B;;QACA,IAAI2I,MAAK,GAAGD,SAAQ,CAACG,aAAT,CAAuBL,SAAvB,CAAZ;;QACA,IAAIG,MAAJ,EAAW;UACTJ,OAAO,CAACvK,IAAR,CAAa,IAAI0K,SAAJ,CAAaC,MAAb,EAAoBxC,OAApB,CAAb;UACA;QACD;MACF;IACF;;IAED,OAAOoC,OAAP;EACD,CAvCM,CAAP;AAwCD,C,CAED;AACA;;;AACA,IAAMO,aAAa,GAAG,IAAIC,GAAJ,CAAQ,CAACnB,UAAU,CAACoB,IAAZ,EAAkBjB,YAAY,CAACiB,IAA/B,CAAR,CAAtB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IACMC,c;EACJ,wBACEtF,OADF,EAYE;IAAA,gFADI,EACJ;IAAA,kCATElE,eASF;IAAA,IATEA,eASF,sCAToBiB,MAAM,CAACjB,eAS3B;IAAA,iCAREJ,cAQF;IAAA,IAREA,cAQF,qCARmBqB,MAAM,CAACrB,cAQ1B;IAAA,kCAPEE,kBAOF;IAAA,IAPEA,kBAOF,sCAPuBmB,MAAM,CAACnB,kBAO9B;IAAA,iCANEgB,cAMF;IAAA,IANEA,cAMF,qCANmBG,MAAM,CAACH,cAM1B;IAAA,iCALEjB,cAKF;IAAA,IALEA,cAKF,qCALmBoB,MAAM,CAACpB,cAK1B;IAAA,2BAJEY,QAIF;IAAA,IAJEA,QAIF,+BAJaQ,MAAM,CAACR,QAIpB;IAAA,4BAHEC,SAGF;IAAA,IAHEA,SAGF,gCAHcO,MAAM,CAACP,SAGrB;IAAA,2BAFEC,QAEF;IAAA,IAFEA,QAEF,+BAFaM,MAAM,CAACN,QAEpB;;IAAA;;IACA,KAAKiI,KAAL,GAAa,IAAb;IACA,KAAKlC,OAAL,GAAe;MACb1G,eAAe,EAAfA,eADa;MAEbJ,cAAc,EAAdA,cAFa;MAGbE,kBAAkB,EAAlBA,kBAHa;MAIbD,cAAc,EAAdA,cAJa;MAKbiB,cAAc,EAAdA,cALa;MAMbL,QAAQ,EAARA,QANa;MAObC,SAAS,EAATA,SAPa;MAQbC,QAAQ,EAARA;IARa,CAAf;IAWA,KAAKuD,OAAL,GAAelE,eAAe,GAAGkE,OAAH,GAAaA,OAAO,CAACyC,WAAR,EAA3C;IACA,KAAKiC,KAAL,GAAaD,UAAU,CAAC,KAAKzE,OAAN,EAAe,KAAKwC,OAApB,CAAvB;EACD;;;;WAMD,kBAAS1B,IAAT,EAAe;MACb,IAAM4D,KAAK,GAAG,KAAKA,KAAnB;;MAEA,IAAI,CAACA,KAAL,EAAY;QACV,OAAO;UACLtC,OAAO,EAAE,KADJ;UAELhG,KAAK,EAAE;QAFF,CAAP;MAID;;MAED,qBAA4C,KAAKoG,OAAjD;MAAA,IAAQ9G,cAAR,kBAAQA,cAAR;MAAA,IAAwBI,eAAxB,kBAAwBA,eAAxB;MAEAgF,IAAI,GAAGhF,eAAe,GAAGgF,IAAH,GAAUA,IAAI,CAAC2B,WAAL,EAAhC;MAEA,IAAI8C,UAAU,GAAG,CAAjB;MACA,IAAIvC,UAAU,GAAG,EAAjB;MACA,IAAIC,UAAU,GAAG,CAAjB,CAhBa,CAkBb;;MACA,KAAK,IAAI1H,CAAC,GAAG,CAAR,EAAWiK,IAAI,GAAGd,KAAK,CAAC7L,MAA7B,EAAqC0C,CAAC,GAAGiK,IAAzC,EAA+CjK,CAAC,IAAI,CAApD,EAAuD;QACrD,IAAM8I,UAAS,GAAGK,KAAK,CAACnJ,CAAD,CAAvB,CADqD,CAGrD;;QACAyH,UAAU,CAACnK,MAAX,GAAoB,CAApB;QACA0M,UAAU,GAAG,CAAb,CALqD,CAOrD;;QACA,KAAK,IAAItD,CAAC,GAAG,CAAR,EAAWwD,IAAI,GAAGpB,UAAS,CAACxL,MAAjC,EAAyCoJ,CAAC,GAAGwD,IAA7C,EAAmDxD,CAAC,IAAI,CAAxD,EAA2D;UACzD,IAAM8C,QAAQ,GAAGV,UAAS,CAACpC,CAAD,CAA1B;;UACA,uBAAoC8C,QAAQ,CAAClE,MAAT,CAAgBC,IAAhB,CAApC;UAAA,IAAQsB,OAAR,oBAAQA,OAAR;UAAA,IAAiB3B,OAAjB,oBAAiBA,OAAjB;UAAA,IAA0BrE,KAA1B,oBAA0BA,KAA1B;;UAEA,IAAIgG,OAAJ,EAAa;YACXmD,UAAU,IAAI,CAAd;YACAtC,UAAU,IAAI7G,KAAd;;YACA,IAAIV,cAAJ,EAAoB;cAClB,IAAM2J,IAAI,GAAGN,QAAQ,CAACW,WAAT,CAAqBL,IAAlC;;cACA,IAAIF,aAAa,CAACzH,GAAd,CAAkB2H,IAAlB,CAAJ,EAA6B;gBAC3BrC,UAAU,gCAAOA,UAAP,sBAAsBvC,OAAtB,EAAV;cACD,CAFD,MAEO;gBACLuC,UAAU,CAAC3I,IAAX,CAAgBoG,OAAhB;cACD;YACF;UACF,CAXD,MAWO;YACLwC,UAAU,GAAG,CAAb;YACAsC,UAAU,GAAG,CAAb;YACAvC,UAAU,CAACnK,MAAX,GAAoB,CAApB;YACA;UACD;QACF,CA7BoD,CA+BrD;;;QACA,IAAI0M,UAAJ,EAAgB;UACd,IAAIrN,MAAM,GAAG;YACXkK,OAAO,EAAE,IADE;YAEXhG,KAAK,EAAE6G,UAAU,GAAGsC;UAFT,CAAb;;UAKA,IAAI7J,cAAJ,EAAoB;YAClBxD,MAAM,CAACuI,OAAP,GAAiBuC,UAAjB;UACD;;UAED,OAAO9K,MAAP;QACD;MACF,CA/DY,CAiEb;;;MACA,OAAO;QACLkK,OAAO,EAAE,KADJ;QAELhG,KAAK,EAAE;MAFF,CAAP;IAID;;;WA1ED,mBAAiBuJ,CAAjB,EAAoBnD,OAApB,EAA6B;MAC3B,OAAOA,OAAO,CAAC7F,iBAAf;IACD;;;;;;AA2EH,IAAMiJ,mBAAmB,GAAG,EAA5B;;AAEA,SAASC,QAAT,GAA2B;EACzBD,mBAAmB,CAACvL,IAApB,OAAAuL,mBAAmB,YAAnB;AACD;;AAED,SAASE,cAAT,CAAwB9F,OAAxB,EAAiCwC,OAAjC,EAA0C;EACxC,KAAK,IAAIjH,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGoK,mBAAmB,CAAC/M,MAA1C,EAAkD0C,CAAC,GAAGC,GAAtD,EAA2DD,CAAC,IAAI,CAAhE,EAAmE;IACjE,IAAIwK,aAAa,GAAGH,mBAAmB,CAACrK,CAAD,CAAvC;;IACA,IAAIwK,aAAa,CAACC,SAAd,CAAwBhG,OAAxB,EAAiCwC,OAAjC,CAAJ,EAA+C;MAC7C,OAAO,IAAIuD,aAAJ,CAAkB/F,OAAlB,EAA2BwC,OAA3B,CAAP;IACD;EACF;;EAED,OAAO,IAAID,WAAJ,CAAgBvC,OAAhB,EAAyBwC,OAAzB,CAAP;AACD;;AAED,IAAMyD,eAAe,GAAG;EACtBC,GAAG,EAAE,MADiB;EAEtBC,EAAE,EAAE;AAFkB,CAAxB;AAKA,IAAMC,OAAO,GAAG;EACdC,IAAI,EAAE,OADQ;EAEdC,OAAO,EAAE;AAFK,CAAhB;;AAKA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAAC7B,KAAD;EAAA,OACnB,CAAC,EAAEA,KAAK,CAACuB,eAAe,CAACC,GAAjB,CAAL,IAA8BxB,KAAK,CAACuB,eAAe,CAACE,EAAjB,CAArC,CADkB;AAAA,CAArB;;AAGA,IAAMK,MAAM,GAAG,SAATA,MAAS,CAAC9B,KAAD;EAAA,OAAW,CAAC,CAACA,KAAK,CAAC0B,OAAO,CAACC,IAAT,CAAlB;AAAA,CAAf;;AAEA,IAAMI,MAAM,GAAG,SAATA,MAAS,CAAC/B,KAAD;EAAA,OACb,CAAC9M,OAAO,CAAC8M,KAAD,CAAR,IAAmBlM,QAAQ,CAACkM,KAAD,CAA3B,IAAsC,CAAC6B,YAAY,CAAC7B,KAAD,CADtC;AAAA,CAAf;;AAGA,IAAMgC,iBAAiB,GAAG,SAApBA,iBAAoB,CAAChC,KAAD;EAAA,2BACvBuB,eAAe,CAACC,GADO,EACDpN,MAAM,CAACe,IAAP,CAAY6K,KAAZ,EAAmBhF,GAAnB,CAAuB,UAACtG,GAAD;IAAA,2BAC3CA,GAD2C,EACrCsL,KAAK,CAACtL,GAAD,CADgC;EAAA,CAAvB,CADC;AAAA,CAA1B,C,CAMA;AACA;;;AACA,SAASuN,KAAT,CAAejC,KAAf,EAAsBlC,OAAtB,EAAqD;EAAA,iFAAJ,EAAI;EAAA,yBAApBoE,IAAoB;EAAA,IAApBA,IAAoB,4BAAb,IAAa;;EACnD,IAAMC,IAAI,GAAG,SAAPA,IAAO,CAACnC,KAAD,EAAW;IACtB,IAAI7K,IAAI,GAAGf,MAAM,CAACe,IAAP,CAAY6K,KAAZ,CAAX;IAEA,IAAMoC,WAAW,GAAGN,MAAM,CAAC9B,KAAD,CAA1B;;IAEA,IAAI,CAACoC,WAAD,IAAgBjN,IAAI,CAAChB,MAAL,GAAc,CAA9B,IAAmC,CAAC0N,YAAY,CAAC7B,KAAD,CAApD,EAA6D;MAC3D,OAAOmC,IAAI,CAACH,iBAAiB,CAAChC,KAAD,CAAlB,CAAX;IACD;;IAED,IAAI+B,MAAM,CAAC/B,KAAD,CAAV,EAAmB;MACjB,IAAMtL,GAAG,GAAG0N,WAAW,GAAGpC,KAAK,CAAC0B,OAAO,CAACC,IAAT,CAAR,GAAyBxM,IAAI,CAAC,CAAD,CAApD;MAEA,IAAMmG,OAAO,GAAG8G,WAAW,GAAGpC,KAAK,CAAC0B,OAAO,CAACE,OAAT,CAAR,GAA4B5B,KAAK,CAACtL,GAAD,CAA5D;;MAEA,IAAI,CAAChB,QAAQ,CAAC4H,OAAD,CAAb,EAAwB;QACtB,MAAM,IAAIjF,KAAJ,CAAU5B,oCAAoC,CAACC,GAAD,CAA9C,CAAN;MACD;;MAED,IAAMc,GAAG,GAAG;QACVK,KAAK,EAAEO,WAAW,CAAC1B,GAAD,CADR;QAEV4G,OAAO,EAAPA;MAFU,CAAZ;;MAKA,IAAI4G,IAAJ,EAAU;QACR1M,GAAG,CAAC6K,QAAJ,GAAee,cAAc,CAAC9F,OAAD,EAAUwC,OAAV,CAA7B;MACD;;MAED,OAAOtI,GAAP;IACD;;IAED,IAAI6M,IAAI,GAAG;MACTC,QAAQ,EAAE,EADD;MAETC,QAAQ,EAAEpN,IAAI,CAAC,CAAD;IAFL,CAAX;IAKAA,IAAI,CAACI,OAAL,CAAa,UAACb,GAAD,EAAS;MACpB,IAAMvB,KAAK,GAAG6M,KAAK,CAACtL,GAAD,CAAnB;;MAEA,IAAIxB,OAAO,CAACC,KAAD,CAAX,EAAoB;QAClBA,KAAK,CAACoC,OAAN,CAAc,UAAC2E,IAAD,EAAU;UACtBmI,IAAI,CAACC,QAAL,CAAc3M,IAAd,CAAmBwM,IAAI,CAACjI,IAAD,CAAvB;QACD,CAFD;MAGD;IACF,CARD;IAUA,OAAOmI,IAAP;EACD,CA9CD;;EAgDA,IAAI,CAACR,YAAY,CAAC7B,KAAD,CAAjB,EAA0B;IACxBA,KAAK,GAAGgC,iBAAiB,CAAChC,KAAD,CAAzB;EACD;;EAED,OAAOmC,IAAI,CAACnC,KAAD,CAAX;AACD,C,CAED;;;AACA,SAASwC,YAAT,CACEtC,OADF,UAGE;EAAA,mCADE/H,eACF;EAAA,IADEA,eACF,sCADoBE,MAAM,CAACF,eAC3B;EACA+H,OAAO,CAAC3K,OAAR,CAAgB,UAAC/B,MAAD,EAAY;IAC1B,IAAI+K,UAAU,GAAG,CAAjB;IAEA/K,MAAM,CAACsL,OAAP,CAAevJ,OAAf,CAAuB,kBAA0B;MAAA,IAAvBb,GAAuB,UAAvBA,GAAuB;MAAA,IAAlB6D,IAAkB,UAAlBA,IAAkB;MAAA,IAAZb,KAAY,UAAZA,KAAY;MAC/C,IAAMhC,MAAM,GAAGhB,GAAG,GAAGA,GAAG,CAACgB,MAAP,GAAgB,IAAlC;MAEA6I,UAAU,IAAI3F,IAAI,CAACC,GAAL,CACZnB,KAAK,KAAK,CAAV,IAAehC,MAAf,GAAwB+M,MAAM,CAACC,OAA/B,GAAyChL,KAD7B,EAEZ,CAAChC,MAAM,IAAI,CAAX,KAAiByC,eAAe,GAAG,CAAH,GAAOI,IAAvC,CAFY,CAAd;IAID,CAPD;IASA/E,MAAM,CAACkE,KAAP,GAAe6G,UAAf;EACD,CAbD;AAcD;;AAED,SAASoE,gBAAT,CAA0BnP,MAA1B,EAAkC4H,IAAlC,EAAwC;EACtC,IAAM0D,OAAO,GAAGtL,MAAM,CAACsL,OAAvB;EACA1D,IAAI,CAAC0D,OAAL,GAAe,EAAf;;EAEA,IAAI,CAAC/K,SAAS,CAAC+K,OAAD,CAAd,EAAyB;IACvB;EACD;;EAEDA,OAAO,CAACvJ,OAAR,CAAgB,UAACwD,KAAD,EAAW;IACzB,IAAI,CAAChF,SAAS,CAACgF,KAAK,CAACgD,OAAP,CAAV,IAA6B,CAAChD,KAAK,CAACgD,OAAN,CAAc5H,MAAhD,EAAwD;MACtD;IACD;;IAED,IAAQ4H,OAAR,GAA2BhD,KAA3B,CAAQgD,OAAR;IAAA,IAAiB5I,KAAjB,GAA2B4F,KAA3B,CAAiB5F,KAAjB;IAEA,IAAIqC,GAAG,GAAG;MACRuG,OAAO,EAAPA,OADQ;MAER5I,KAAK,EAALA;IAFQ,CAAV;;IAKA,IAAI4F,KAAK,CAACrE,GAAV,EAAe;MACbc,GAAG,CAACd,GAAJ,GAAUqE,KAAK,CAACrE,GAAN,CAAUuB,GAApB;IACD;;IAED,IAAI8C,KAAK,CAACpB,GAAN,GAAY,CAAC,CAAjB,EAAoB;MAClBnC,GAAG,CAACoN,QAAJ,GAAe7J,KAAK,CAACpB,GAArB;IACD;;IAEDyD,IAAI,CAAC0D,OAAL,CAAanJ,IAAb,CAAkBH,GAAlB;EACD,CArBD;AAsBD;;AAED,SAASqN,cAAT,CAAwBrP,MAAxB,EAAgC4H,IAAhC,EAAsC;EACpCA,IAAI,CAAC1D,KAAL,GAAalE,MAAM,CAACkE,KAApB;AACD;;AAED,SAASoL,MAAT,CACE5C,OADF,EAEEzG,IAFF,EAOE;EAAA,iFADI,EACJ;EAAA,mCAHEzC,cAGF;EAAA,IAHEA,cAGF,sCAHmBqB,MAAM,CAACrB,cAG1B;EAAA,iCAFEK,YAEF;EAAA,IAFEA,YAEF,oCAFiBgB,MAAM,CAAChB,YAExB;;EACA,IAAM0L,YAAY,GAAG,EAArB;EAEA,IAAI/L,cAAJ,EAAoB+L,YAAY,CAACpN,IAAb,CAAkBgN,gBAAlB;EACpB,IAAItL,YAAJ,EAAkB0L,YAAY,CAACpN,IAAb,CAAkBkN,cAAlB;EAElB,OAAO3C,OAAO,CAAClF,GAAR,CAAY,UAACxH,MAAD,EAAY;IAC7B,IAAQmE,GAAR,GAAgBnE,MAAhB,CAAQmE,GAAR;IAEA,IAAMyD,IAAI,GAAG;MACXlB,IAAI,EAAET,IAAI,CAAC9B,GAAD,CADC;MAEXiL,QAAQ,EAAEjL;IAFC,CAAb;;IAKA,IAAIoL,YAAY,CAAC5O,MAAjB,EAAyB;MACvB4O,YAAY,CAACxN,OAAb,CAAqB,UAACyN,WAAD,EAAiB;QACpCA,WAAW,CAACxP,MAAD,EAAS4H,IAAT,CAAX;MACD,CAFD;IAGD;;IAED,OAAOA,IAAP;EACD,CAfM,CAAP;AAgBD;;IAEK6H,I;EACJ,cAAYxJ,IAAZ,EAAuC;IAAA,IAArBqE,OAAqB,uEAAX,EAAW;IAAA,IAAPlH,KAAO;;IAAA;;IACrC,KAAKkH,OAAL,mCAAoBzF,MAApB,GAA+ByF,OAA/B;;IAEA,IACE,KAAKA,OAAL,CAAa7F,iBAAb,IACA,CAAC,IAFH,EAGE;MACA,MAAM,IAAI5B,KAAJ,CAAU9B,2BAAV,CAAN;IACD;;IAED,KAAK2O,SAAL,GAAiB,IAAIhO,QAAJ,CAAa,KAAK4I,OAAL,CAAa3I,IAA1B,CAAjB;IAEA,KAAKgO,aAAL,CAAmB1J,IAAnB,EAAyB7C,KAAzB;EACD;;;;WAED,uBAAc6C,IAAd,EAAoB7C,KAApB,EAA2B;MACzB,KAAKwM,KAAL,GAAa3J,IAAb;;MAEA,IAAI7C,KAAK,IAAI,EAAEA,KAAK,YAAY0C,SAAnB,CAAb,EAA4C;QAC1C,MAAM,IAAIjD,KAAJ,CAAU7B,oBAAV,CAAN;MACD;;MAED,KAAK6O,QAAL,GACEzM,KAAK,IACLiE,WAAW,CAAC,KAAKiD,OAAL,CAAa3I,IAAd,EAAoB,KAAKiO,KAAzB,EAAgC;QACzClN,KAAK,EAAE,KAAK4H,OAAL,CAAa5H,KADqB;QAEzCkC,eAAe,EAAE,KAAK0F,OAAL,CAAa1F;MAFW,CAAhC,CAFb;IAMD;;;WAED,aAAIwB,GAAJ,EAAS;MACP,IAAI,CAAC7F,SAAS,CAAC6F,GAAD,CAAd,EAAqB;QACnB;MACD;;MAED,KAAKwJ,KAAL,CAAWzN,IAAX,CAAgBiE,GAAhB;;MACA,KAAKyJ,QAAL,CAAcC,GAAd,CAAkB1J,GAAlB;IACD;;;WAED,kBAA8C;MAAA,IAAvC2J,SAAuC,uEAA3B;QAAC;MAAD;QAAA,OAAoB,KAApB;MAAA,CAA2B;MAC5C,IAAMrD,OAAO,GAAG,EAAhB;;MAEA,KAAK,IAAIrJ,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAG,KAAKsM,KAAL,CAAWjP,MAAjC,EAAyC0C,CAAC,GAAGC,GAA7C,EAAkDD,CAAC,IAAI,CAAvD,EAA0D;QACxD,IAAM+C,GAAG,GAAG,KAAKwJ,KAAL,CAAWvM,CAAX,CAAZ;;QACA,IAAI0M,SAAS,CAAC3J,GAAD,EAAM/C,CAAN,CAAb,EAAuB;UACrB,KAAK2M,QAAL,CAAc3M,CAAd;UACAA,CAAC,IAAI,CAAL;UACAC,GAAG,IAAI,CAAP;UAEAoJ,OAAO,CAACvK,IAAR,CAAaiE,GAAb;QACD;MACF;;MAED,OAAOsG,OAAP;IACD;;;WAED,kBAASvI,GAAT,EAAc;MACZ,KAAKyL,KAAL,CAAWnJ,MAAX,CAAkBtC,GAAlB,EAAuB,CAAvB;;MACA,KAAK0L,QAAL,CAAcG,QAAd,CAAuB7L,GAAvB;IACD;;;WAED,oBAAW;MACT,OAAO,KAAK0L,QAAZ;IACD;;;WAED,gBAAOrD,KAAP,EAAmC;MAAA,iFAAJ,EAAI;MAAA,0BAAnByD,KAAmB;MAAA,IAAnBA,KAAmB,6BAAX,CAAC,CAAU;;MACjC,qBAMI,KAAK3F,OANT;MAAA,IACE9G,cADF,kBACEA,cADF;MAAA,IAEEK,YAFF,kBAEEA,YAFF;MAAA,IAGEC,UAHF,kBAGEA,UAHF;MAAA,IAIEC,MAJF,kBAIEA,MAJF;MAAA,IAKEY,eALF,kBAKEA,eALF;MAQA,IAAI+H,OAAO,GAAGxM,QAAQ,CAACsM,KAAD,CAAR,GACVtM,QAAQ,CAAC,KAAK0P,KAAL,CAAW,CAAX,CAAD,CAAR,GACE,KAAKM,iBAAL,CAAuB1D,KAAvB,CADF,GAEE,KAAK2D,iBAAL,CAAuB3D,KAAvB,CAHQ,GAIV,KAAK4D,cAAL,CAAoB5D,KAApB,CAJJ;MAMAwC,YAAY,CAACtC,OAAD,EAAU;QAAE/H,eAAe,EAAfA;MAAF,CAAV,CAAZ;;MAEA,IAAIb,UAAJ,EAAgB;QACd4I,OAAO,CAAC2D,IAAR,CAAatM,MAAb;MACD;;MAED,IAAI5D,QAAQ,CAAC8P,KAAD,CAAR,IAAmBA,KAAK,GAAG,CAAC,CAAhC,EAAmC;QACjCvD,OAAO,GAAGA,OAAO,CAAC4D,KAAR,CAAc,CAAd,EAAiBL,KAAjB,CAAV;MACD;;MAED,OAAOX,MAAM,CAAC5C,OAAD,EAAU,KAAKkD,KAAf,EAAsB;QACjCpM,cAAc,EAAdA,cADiC;QAEjCK,YAAY,EAAZA;MAFiC,CAAtB,CAAb;IAID;;;WAED,2BAAkB2I,KAAlB,EAAyB;MACvB,IAAMK,QAAQ,GAAGe,cAAc,CAACpB,KAAD,EAAQ,KAAKlC,OAAb,CAA/B;MACA,IAAQpE,OAAR,GAAoB,KAAK2J,QAAzB,CAAQ3J,OAAR;MACA,IAAMwG,OAAO,GAAG,EAAhB,CAHuB,CAKvB;;MACAxG,OAAO,CAACnE,OAAR,CAAgB,kBAAkC;QAAA,IAA5B6G,IAA4B,UAA/BhC,CAA+B;QAAA,IAAnBzC,GAAmB,UAAtBd,CAAsB;QAAA,IAAX0B,IAAW,UAAdU,CAAc;;QAChD,IAAI,CAAClF,SAAS,CAACqI,IAAD,CAAd,EAAsB;UACpB;QACD;;QAED,yBAAoCiE,QAAQ,CAACZ,QAAT,CAAkBrD,IAAlB,CAApC;QAAA,IAAQsB,OAAR,sBAAQA,OAAR;QAAA,IAAiBhG,KAAjB,sBAAiBA,KAAjB;QAAA,IAAwBqE,OAAxB,sBAAwBA,OAAxB;;QAEA,IAAI2B,OAAJ,EAAa;UACXwC,OAAO,CAACvK,IAAR,CAAa;YACXuE,IAAI,EAAEkC,IADK;YAEXzE,GAAG,EAAHA,GAFW;YAGXmH,OAAO,EAAE,CAAC;cAAEpH,KAAK,EAALA,KAAF;cAASvE,KAAK,EAAEiJ,IAAhB;cAAsB7D,IAAI,EAAJA,IAAtB;cAA4BwD,OAAO,EAAPA;YAA5B,CAAD;UAHE,CAAb;QAKD;MACF,CAdD;MAgBA,OAAOmE,OAAP;IACD;;;WAED,wBAAeF,KAAf,EAAsB;MAAA;;MAEpB,IAAM+D,UAAU,GAAG9B,KAAK,CAACjC,KAAD,EAAQ,KAAKlC,OAAb,CAAxB;;MAEA,IAAMkG,QAAQ,GAAG,SAAXA,QAAW,CAAC3B,IAAD,EAAOnI,IAAP,EAAavC,GAAb,EAAqB;QACpC,IAAI,CAAC0K,IAAI,CAACC,QAAV,EAAoB;UAClB,IAAQzM,KAAR,GAA4BwM,IAA5B,CAAQxM,KAAR;UAAA,IAAewK,QAAf,GAA4BgC,IAA5B,CAAehC,QAAf;;UAEA,IAAMvB,OAAO,GAAG,MAAI,CAACmF,YAAL,CAAkB;YAChCvP,GAAG,EAAE,MAAI,CAACwO,SAAL,CAAe1M,GAAf,CAAmBX,KAAnB,CAD2B;YAEhC1C,KAAK,EAAE,MAAI,CAACkQ,QAAL,CAAca,sBAAd,CAAqChK,IAArC,EAA2CrE,KAA3C,CAFyB;YAGhCwK,QAAQ,EAARA;UAHgC,CAAlB,CAAhB;;UAMA,IAAIvB,OAAO,IAAIA,OAAO,CAAC3K,MAAvB,EAA+B;YAC7B,OAAO,CACL;cACEwD,GAAG,EAAHA,GADF;cAEEuC,IAAI,EAAJA,IAFF;cAGE4E,OAAO,EAAPA;YAHF,CADK,CAAP;UAOD;;UAED,OAAO,EAAP;QACD;;QAED,IAAMqF,GAAG,GAAG,EAAZ;;QACA,KAAK,IAAItN,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGuL,IAAI,CAACC,QAAL,CAAcnO,MAApC,EAA4C0C,CAAC,GAAGC,GAAhD,EAAqDD,CAAC,IAAI,CAA1D,EAA6D;UAC3D,IAAMuN,KAAK,GAAG/B,IAAI,CAACC,QAAL,CAAczL,CAAd,CAAd;UACA,IAAMrD,MAAM,GAAGwQ,QAAQ,CAACI,KAAD,EAAQlK,IAAR,EAAcvC,GAAd,CAAvB;;UACA,IAAInE,MAAM,CAACW,MAAX,EAAmB;YACjBgQ,GAAG,CAACxO,IAAJ,OAAAwO,GAAG,qBAAS3Q,MAAT,EAAH;UACD,CAFD,MAEO,IAAI6O,IAAI,CAACE,QAAL,KAAkBhB,eAAe,CAACC,GAAtC,EAA2C;YAChD,OAAO,EAAP;UACD;QACF;;QACD,OAAO2C,GAAP;MACD,CAlCD;;MAoCA,IAAMzK,OAAO,GAAG,KAAK2J,QAAL,CAAc3J,OAA9B;MACA,IAAM2K,SAAS,GAAG,EAAlB;MACA,IAAMnE,OAAO,GAAG,EAAhB;MAEAxG,OAAO,CAACnE,OAAR,CAAgB,kBAAyB;QAAA,IAAnB2E,IAAmB,UAAtBG,CAAsB;QAAA,IAAV1C,GAAU,UAAbd,CAAa;;QACvC,IAAI9C,SAAS,CAACmG,IAAD,CAAb,EAAqB;UACnB,IAAIoK,UAAU,GAAGN,QAAQ,CAACD,UAAD,EAAa7J,IAAb,EAAmBvC,GAAnB,CAAzB;;UAEA,IAAI2M,UAAU,CAACnQ,MAAf,EAAuB;YACrB;YACA,IAAI,CAACkQ,SAAS,CAAC1M,GAAD,CAAd,EAAqB;cACnB0M,SAAS,CAAC1M,GAAD,CAAT,GAAiB;gBAAEA,GAAG,EAAHA,GAAF;gBAAOuC,IAAI,EAAJA,IAAP;gBAAa4E,OAAO,EAAE;cAAtB,CAAjB;cACAoB,OAAO,CAACvK,IAAR,CAAa0O,SAAS,CAAC1M,GAAD,CAAtB;YACD;;YACD2M,UAAU,CAAC/O,OAAX,CAAmB,kBAAiB;cAAA;;cAAA,IAAduJ,OAAc,UAAdA,OAAc;;cAClC,yBAAAuF,SAAS,CAAC1M,GAAD,CAAT,CAAemH,OAAf,EAAuBnJ,IAAvB,iDAA+BmJ,OAA/B;YACD,CAFD;UAGD;QACF;MACF,CAfD;MAiBA,OAAOoB,OAAP;IACD;;;WAED,2BAAkBF,KAAlB,EAAyB;MAAA;;MACvB,IAAMK,QAAQ,GAAGe,cAAc,CAACpB,KAAD,EAAQ,KAAKlC,OAAb,CAA/B;MACA,qBAA0B,KAAKuF,QAA/B;MAAA,IAAQlO,IAAR,kBAAQA,IAAR;MAAA,IAAcuE,OAAd,kBAAcA,OAAd;MACA,IAAMwG,OAAO,GAAG,EAAhB,CAHuB,CAKvB;;MACAxG,OAAO,CAACnE,OAAR,CAAgB,kBAAyB;QAAA,IAAnB2E,IAAmB,UAAtBG,CAAsB;QAAA,IAAV1C,GAAU,UAAbd,CAAa;;QACvC,IAAI,CAAC9C,SAAS,CAACmG,IAAD,CAAd,EAAsB;UACpB;QACD;;QAED,IAAI4E,OAAO,GAAG,EAAd,CALuC,CAOvC;;QACA3J,IAAI,CAACI,OAAL,CAAa,UAACb,GAAD,EAAM4F,QAAN,EAAmB;UAC9BwE,OAAO,CAACnJ,IAAR,OAAAmJ,OAAO,qBACF,MAAI,CAACmF,YAAL,CAAkB;YACnBvP,GAAG,EAAHA,GADmB;YAEnBvB,KAAK,EAAE+G,IAAI,CAACI,QAAD,CAFQ;YAGnB+F,QAAQ,EAARA;UAHmB,CAAlB,CADE,EAAP;QAOD,CARD;;QAUA,IAAIvB,OAAO,CAAC3K,MAAZ,EAAoB;UAClB+L,OAAO,CAACvK,IAAR,CAAa;YACXgC,GAAG,EAAHA,GADW;YAEXuC,IAAI,EAAJA,IAFW;YAGX4E,OAAO,EAAPA;UAHW,CAAb;QAKD;MACF,CAzBD;MA2BA,OAAOoB,OAAP;IACD;;;WACD,8BAAuC;MAAA,IAAxBxL,GAAwB,UAAxBA,GAAwB;MAAA,IAAnBvB,KAAmB,UAAnBA,KAAmB;MAAA,IAAZkN,QAAY,UAAZA,QAAY;;MACrC,IAAI,CAACtM,SAAS,CAACZ,KAAD,CAAd,EAAuB;QACrB,OAAO,EAAP;MACD;;MAED,IAAI2L,OAAO,GAAG,EAAd;;MAEA,IAAI5L,OAAO,CAACC,KAAD,CAAX,EAAoB;QAClBA,KAAK,CAACoC,OAAN,CAAc,kBAAkC;UAAA,IAA5B6G,IAA4B,UAA/BhC,CAA+B;UAAA,IAAnBzC,GAAmB,UAAtBd,CAAsB;UAAA,IAAX0B,IAAW,UAAdU,CAAc;;UAC9C,IAAI,CAAClF,SAAS,CAACqI,IAAD,CAAd,EAAsB;YACpB;UACD;;UAED,0BAAoCiE,QAAQ,CAACZ,QAAT,CAAkBrD,IAAlB,CAApC;UAAA,IAAQsB,OAAR,uBAAQA,OAAR;UAAA,IAAiBhG,KAAjB,uBAAiBA,KAAjB;UAAA,IAAwBqE,OAAxB,uBAAwBA,OAAxB;;UAEA,IAAI2B,OAAJ,EAAa;YACXoB,OAAO,CAACnJ,IAAR,CAAa;cACX+B,KAAK,EAALA,KADW;cAEXhD,GAAG,EAAHA,GAFW;cAGXvB,KAAK,EAAEiJ,IAHI;cAIXzE,GAAG,EAAHA,GAJW;cAKXY,IAAI,EAAJA,IALW;cAMXwD,OAAO,EAAPA;YANW,CAAb;UAQD;QACF,CAjBD;MAkBD,CAnBD,MAmBO;QACL,IAAWK,IAAX,GAA6BjJ,KAA7B,CAAQiH,CAAR;QAAA,IAAoB7B,KAApB,GAA6BpF,KAA7B,CAAiB8F,CAAjB;;QAEA,0BAAoCoH,QAAQ,CAACZ,QAAT,CAAkBrD,IAAlB,CAApC;QAAA,IAAQsB,OAAR,uBAAQA,OAAR;QAAA,IAAiBhG,KAAjB,uBAAiBA,KAAjB;QAAA,IAAwBqE,OAAxB,uBAAwBA,OAAxB;;QAEA,IAAI2B,OAAJ,EAAa;UACXoB,OAAO,CAACnJ,IAAR,CAAa;YAAE+B,KAAK,EAALA,KAAF;YAAShD,GAAG,EAAHA,GAAT;YAAcvB,KAAK,EAAEiJ,IAArB;YAA2B7D,IAAI,EAAJA,KAA3B;YAAiCwD,OAAO,EAAPA;UAAjC,CAAb;QACD;MACF;;MAED,OAAO+C,OAAP;IACD;;;;;;AAGHmE,IAAI,CAACsB,OAAL,GAAe,OAAf;AACAtB,IAAI,CAACpI,WAAL,GAAmBA,WAAnB;AACAoI,IAAI,CAAC9H,UAAL,GAAkBA,UAAlB;AACA8H,IAAI,CAACuB,MAAL,GAAcnM,MAAd;AAEA;EACE4K,IAAI,CAAClD,UAAL,GAAkBkC,KAAlB;AACD;AAED;EACEd,QAAQ,CAACP,cAAD,CAAR;AACD;AAED,SAASqC,IAAI,IAAIwB,OAAjB"},"metadata":{},"sourceType":"module"}